{
  "version": 3,
  "sources": ["../../@ss/ui/src/components/ss-collapsable/ss-collapsable.models.ts", "../../@ss/ui/src/components/ss-collapsable/ss-collapsable.events.ts", "../../@ss/ui/src/components/ss-collapsable/ss-collapsable.ts"],
  "sourcesContent": ["import { PropConfigMap, PropTypes } from '../../models/Prop';\n\nexport enum SSCollapsableProp {\n  TITLE = 'title',\n  OPEN = 'open',\n  PANEL_ID = 'panelId',\n}\n\nexport interface SSCollapsableProps extends PropTypes {\n  [SSCollapsableProp.TITLE]: string;\n  [SSCollapsableProp.OPEN]: boolean;\n  [SSCollapsableProp.PANEL_ID]: string;\n}\n\nexport const ssCollapsableProps: PropConfigMap<SSCollapsableProps> = {\n  [SSCollapsableProp.TITLE]: {\n    default: '',\n    description: 'The heading in which is always displayed',\n    control: 'text',\n  },\n  [SSCollapsableProp.OPEN]: {\n    default: false,\n    description: 'Whether the content is in opened state',\n    control: 'boolean',\n  },\n  [SSCollapsableProp.PANEL_ID]: {\n    default: '',\n    description: 'The unique identifier for the panel',\n    control: 'text',\n  },\n};\n", "export const collapsableToggledEventName = 'collapsable-toggled';\n\nexport interface CollapsableToggledEventPayload {\n  panelId: string;\n  isOpen: boolean;\n}\n\nexport class CollapsableToggledEvent extends CustomEvent<CollapsableToggledEventPayload> {\n  constructor(payload: CollapsableToggledEventPayload) {\n    super(collapsableToggledEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n", "import { LitElement, html, css, PropertyValues } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { theme } from '../../styles/theme';\nimport {\n  SSCollapsableProp,\n  ssCollapsableProps,\n  SSCollapsableProps,\n} from './ss-collapsable.models';\nimport { CollapsableToggledEvent } from './ss-collapsable.events';\n\n@customElement('ss-collapsable')\nexport class SSCollapsable extends LitElement {\n  static styles = [\n    theme,\n    css`\n      .collapsable {\n        padding: 1rem;\n      }\n\n      .head {\n        display: flex;\n      }\n\n      .title {\n        flex-grow: 9;\n      }\n\n      .icon {\n        flex-grow: 1;\n        text-align: right;\n      }\n\n      .icon button {\n        width: auto;\n        padding: 0 0.5rem;\n      }\n\n      .body {\n        display: none;\n        transition: all 0.3s;\n        overflow: hidden;\n      }\n\n      .collapsable.open .body {\n        display: block;\n        padding-top: 1rem;\n      }\n    `,\n  ];\n\n  @property()\n  [SSCollapsableProp.TITLE]: SSCollapsableProps[SSCollapsableProp.TITLE] =\n    ssCollapsableProps[SSCollapsableProp.TITLE].default;\n\n  @property({ type: Boolean, reflect: true })\n  [SSCollapsableProp.OPEN]: SSCollapsableProps[SSCollapsableProp.OPEN] =\n    ssCollapsableProps[SSCollapsableProp.OPEN].default;\n\n  @property({ type: String, reflect: true })\n  [SSCollapsableProp.PANEL_ID]: SSCollapsableProps[SSCollapsableProp.PANEL_ID] =\n    ssCollapsableProps[SSCollapsableProp.PANEL_ID].default;\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n\n    if (this.panelId === '') {\n      this.panelId = this.title;\n    }\n  }\n\n  @state()\n  get classes() {\n    return { box: true, collapsable: true, open: this.open };\n  }\n\n  private handleIconClick() {\n    this.toggle();\n  }\n\n  private toggle() {\n    this.open = !this.open;\n\n    /**\n     * @todo remove this event once fully transitioned to CollapsableToggledEvent\n     */\n    this.dispatchEvent(\n      new CustomEvent('toggled', {\n        bubbles: true,\n        composed: true,\n        detail: this.open,\n      }),\n    );\n\n    this.dispatchEvent(\n      new CollapsableToggledEvent({ panelId: this.panelId, isOpen: this.open }),\n    );\n  }\n\n  render() {\n    return html`\n      <div class=${classMap(this.classes)}>\n        <div class=\"head\">\n          <div class=\"title\">${this.title}</div>\n          <div class=\"icon\">\n            <button @click=${() => this.handleIconClick()}>\n              ${this.open ? '-' : '+'}\n            </button>\n          </div>\n        </div>\n        <div class=\"body\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAY;CAAZ,SAAYA,oBAAiB;AAC3B,EAAAA,mBAAA,OAAA,IAAA;AACA,EAAAA,mBAAA,MAAA,IAAA;AACA,EAAAA,mBAAA,UAAA,IAAA;AACF,GAJY,sBAAA,oBAAiB,CAAA,EAAA;AAYtB,IAAM,qBAAwD;EACnE,CAAC,kBAAkB,KAAK,GAAG;IACzB,SAAS;IACT,aAAa;IACb,SAAS;;EAEX,CAAC,kBAAkB,IAAI,GAAG;IACxB,SAAS;IACT,aAAa;IACb,SAAS;;EAEX,CAAC,kBAAkB,QAAQ,GAAG;IAC5B,SAAS;IACT,aAAa;IACb,SAAS;;;;;AC5BN,IAAM,8BAA8B;AAOrC,IAAO,0BAAP,cAAuC,YAA2C;EACtF,YAAY,SAAuC;AACjD,UAAM,6BAA6B;MACjC,SAAS;MACT,UAAU;MACV,QAAQ;KACT;EACH;;;;;;;;;;;;;;ACDK,IAAM,iBAANC,MAAA,cAA4B,WAAU;EAAtC,cAAA;;AAwCL,SAAA,EAAA,IACE,mBAAmB,kBAAkB,KAAK,EAAE;AAG9C,SAAA,EAAA,IACE,mBAAmB,kBAAkB,IAAI,EAAE;AAG7C,SAAA,EAAA,IACE,mBAAmB,kBAAkB,QAAQ,EAAE;EAuDnD;EArDY,aAAa,mBAAiC;AACtD,UAAM,aAAa,iBAAiB;AAEpC,QAAI,KAAK,YAAY,IAAI;AACvB,WAAK,UAAU,KAAK;;EAExB;EAGA,IAAI,UAAO;AACT,WAAO,EAAE,KAAK,MAAM,aAAa,MAAM,MAAM,KAAK,KAAI;EACxD;EAEQ,kBAAe;AACrB,SAAK,OAAM;EACb;EAEQ,SAAM;AACZ,SAAK,OAAO,CAAC,KAAK;AAKlB,SAAK,cACH,IAAI,YAAY,WAAW;MACzB,SAAS;MACT,UAAU;MACV,QAAQ,KAAK;KACd,CAAC;AAGJ,SAAK,cACH,IAAI,wBAAwB,EAAE,SAAS,KAAK,SAAS,QAAQ,KAAK,KAAI,CAAE,CAAC;EAE7E;EAEA,SAAM;AACJ,WAAO;mBACQ,SAAS,KAAK,OAAO,CAAC;;+BAEV,KAAK,KAAK;;6BAEZ,MAAM,KAAK,gBAAe,CAAE;gBACzC,KAAK,OAAO,MAAM,GAAG;;;;;;;;;EASnC;QA/DC,kBAAkB,OAAK,KAIvB,kBAAkB,MAAI,KAItB,kBAAkB,UA/CZA,IAAA,SAAS;EACd;EACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAHGA;AAwCL,WAAA;EADC,SAAQ;;AAKT,WAAA;EADC,SAAS,EAAE,MAAM,SAAS,SAAS,KAAI,CAAE;;AAK1C,WAAA;EADC,SAAS,EAAE,MAAM,QAAQ,SAAS,KAAI,CAAE;;AAazC,WAAA;EADC,MAAK;;AA3DK,gBAAa,WAAA;EADzB,cAAc,gBAAgB;GAClB,aAAa;",
  "names": ["SSCollapsableProp", "_a"]
}
