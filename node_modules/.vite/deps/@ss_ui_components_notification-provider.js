import {
  repeat
} from "./chunk-HF2IGRDM.js";
import {
  NotificationProviderProp,
  NotificationSide,
  NotificationType,
  notificationProviderProps
} from "./chunk-WRPKNMBX.js";
import {
  classMap
} from "./chunk-NRWESX2P.js";
import {
  theme
} from "./chunk-3IYY47KY.js";
import {
  customElement,
  property,
  state
} from "./chunk-UZUV3VNE.js";
import "./chunk-RMSEGTBR.js";
import {
  LitElement
} from "./chunk-M5Y2UPGE.js";
import {
  css
} from "./chunk-SBXOPBOA.js";
import {
  html
} from "./chunk-32RPEPIA.js";

// node_modules/@ss/ui/dist/components/notification-provider/notification-message/notification-message.models.js
var NotificationMessageProp;
(function(NotificationMessageProp2) {
  NotificationMessageProp2["NOTIFICATION_ID"] = "notificationId";
  NotificationMessageProp2["MESSAGE"] = "message";
  NotificationMessageProp2["TYPE"] = "type";
  NotificationMessageProp2["START_TIME"] = "startTime";
  NotificationMessageProp2["MESSAGE_LIFE"] = "messageLife";
})(NotificationMessageProp || (NotificationMessageProp = {}));
var notificationMessageProps = {
  [NotificationMessageProp.NOTIFICATION_ID]: {
    default: 0,
    control: "number",
    description: "The id of the notification"
  },
  [NotificationMessageProp.MESSAGE]: {
    default: "",
    control: "text",
    description: "The message to display"
  },
  [NotificationMessageProp.TYPE]: {
    default: NotificationType.INFO,
    control: "text",
    description: "The type of message to display"
  },
  [NotificationMessageProp.START_TIME]: {
    default: (/* @__PURE__ */ new Date()).getTime(),
    control: "number",
    description: "The time the message was created"
  },
  [NotificationMessageProp.MESSAGE_LIFE]: {
    default: 5e3,
    control: "number",
    description: "The time in milliseconds that a message will be displayed"
  }
};

// node_modules/@ss/ui/dist/components/notification-provider/notification-message/notification-message.events.js
var notificationClickedEventName = "notification-clicked";
var NotificationClickedEvent = class extends CustomEvent {
  constructor(payload) {
    super(notificationClickedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};

// node_modules/@ss/ui/dist/components/notification-provider/notification-message/notification-message.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
var _b;
var _c;
var _d;
var _e;
var _a2;
var NotificationMessage = (_a2 = class extends LitElement {
  constructor() {
    super(...arguments);
    this[_a] = notificationMessageProps[NotificationMessageProp.NOTIFICATION_ID].default;
    this[_b] = notificationMessageProps[NotificationMessageProp.MESSAGE].default;
    this[_c] = notificationMessageProps[NotificationMessageProp.TYPE].default;
    this[_d] = notificationMessageProps[NotificationMessageProp.START_TIME].default;
    this[_e] = notificationMessageProps[NotificationMessageProp.MESSAGE_LIFE].default;
  }
  get classes() {
    return {
      "notification-message": true,
      [this[NotificationMessageProp.TYPE]]: true
    };
  }
  render() {
    return html`
      <div
        @click=${() => this.dispatchEvent(new NotificationClickedEvent({ id: this.notificationId }))}
        class=${classMap(this.classes)}
        style=${`--message-life: ${this[NotificationMessageProp.MESSAGE_LIFE]}ms`}
      >
        <div class="time-indicator"></div>
        <div class="content">
          ${this[NotificationMessageProp.MESSAGE]}
          <slot></slot>
        </div>
      </div>
    `;
  }
}, _a = NotificationMessageProp.NOTIFICATION_ID, _b = NotificationMessageProp.MESSAGE, _c = NotificationMessageProp.TYPE, _d = NotificationMessageProp.START_TIME, _e = NotificationMessageProp.MESSAGE_LIFE, _a2.styles = [
  theme,
  css`
      .notification-message {
        position: relative;
        background-color: var(--color, #ddd);
        color: #333;
        text-align: center;
        padding: 0.25rem;
        animation: fade-out var(--message-life, 1000ms) linear forwards;
        margin: 0.5rem 0;
        border-radius: 0.25rem;
        box-shadow: 0 0 1rem rgba(0, 0, 0, 0.25);

        &.success {
          background-color: var(--color-success, #4caf50);
          color: #fff;
        }

        &.error {
          background-color: var(--color-error, #f44336);
          color: #fff;
        }

        &.info {
          background-color: var(--color-info, #2196f3);
          color: #fff;
        }

        .time-indicator {
          position: absolute;
          top: 0;
          left: 0;
          height: 100%;
          z-index: 1;
          background: linear-gradient(
            90deg,
            rgba(255, 255, 255, 0.125),
            rgba(255, 255, 255, 0.25)
          );
          animation: time-elapsed var(--message-life, 1000ms) linear forwards;
        }

        .content {
          position: relative;
          height: 100%;
          width: 100%;
          z-index: 2;
        }
      }

      @keyframes time-elapsed {
        0% {
          width: 0%;
        }
        100% {
          width: 100%;
        }
      }

      @keyframes fade-out {
        0% {
          opacity: 1;
        }
        75% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
    `
], _a2);
__decorate([
  property({ type: Number })
], NotificationMessage.prototype, _a, void 0);
__decorate([
  property()
], NotificationMessage.prototype, _b, void 0);
__decorate([
  property()
], NotificationMessage.prototype, _c, void 0);
__decorate([
  property({ type: Number })
], NotificationMessage.prototype, _d, void 0);
__decorate([
  property({ type: Number, reflect: true })
], NotificationMessage.prototype, _e, void 0);
NotificationMessage = __decorate([
  customElement("notification-message")
], NotificationMessage);

// node_modules/@ss/ui/dist/components/notification-provider/notification-provider.js
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a3;
var _b2;
var _c2;
var _a4;
var NotificationProvider = (_a4 = class extends LitElement {
  constructor() {
    super(...arguments);
    this.notificationId = 0;
    this.notifications = [];
    this[_a3] = notificationProviderProps[NotificationProviderProp.MESSAGE_LIFE].default;
    this[_b2] = notificationProviderProps[NotificationProviderProp.TOP].default;
    this[_c2] = notificationProviderProps[NotificationProviderProp.BOTTOM].default;
  }
  get classes() {
    return {
      "notification-provider": true,
      top: this.side === NotificationSide.TOP,
      bottom: this.side === NotificationSide.BOTTOM
    };
  }
  get side() {
    if (this[NotificationProviderProp.TOP]) {
      return NotificationSide.TOP;
    }
    return NotificationSide.BOTTOM;
  }
  addNotification(message, type) {
    const id = this.notificationId++;
    const notification = {
      id,
      message,
      type,
      startTime: /* @__PURE__ */ new Date(),
      messageLife: this[NotificationProviderProp.MESSAGE_LIFE]
    };
    this.notifications = [...this.notifications, notification];
    setTimeout(() => {
      this.removeNotification(id);
    }, this[NotificationProviderProp.MESSAGE_LIFE]);
    return id;
  }
  removeNotification(id) {
    this.notifications = this.notifications.filter((n) => n.id !== id);
  }
  render() {
    return html`
      <div class=${classMap(this.classes)}>
        ${repeat(this.notifications, (n) => n.id, (n) => {
      return html` <notification-message
              @notification-clicked=${() => this.removeNotification(n.id)}
              message=${n.message}
              type=${n.type}
              startTime=${n.startTime.getTime()}
              messageLife=${n.messageLife}
            ></notification-message>`;
    })}
      </div>
    `;
  }
}, _a3 = NotificationProviderProp.MESSAGE_LIFE, _b2 = NotificationProviderProp.TOP, _c2 = NotificationProviderProp.BOTTOM, _a4.styles = [
  theme,
  css`
      .notification-provider {
        position: fixed;
        left: 10vw;
        width: 80vw;
        z-index: 1000;

        &.top {
          top: 0;
        }

        &.bottom {
          bottom: 0;
        }
      }
    `
], _a4);
__decorate2([
  state()
], NotificationProvider.prototype, "notifications", void 0);
__decorate2([
  property({ type: Number, reflect: true })
], NotificationProvider.prototype, _a3, void 0);
__decorate2([
  property({ type: Boolean })
], NotificationProvider.prototype, _b2, void 0);
__decorate2([
  property({ type: Boolean })
], NotificationProvider.prototype, _c2, void 0);
__decorate2([
  state()
], NotificationProvider.prototype, "classes", null);
__decorate2([
  state()
], NotificationProvider.prototype, "side", null);
NotificationProvider = __decorate2([
  customElement("notification-provider")
], NotificationProvider);
export {
  NotificationProvider
};
//# sourceMappingURL=@ss_ui_components_notification-provider.js.map
