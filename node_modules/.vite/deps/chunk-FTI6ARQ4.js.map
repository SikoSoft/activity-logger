{
  "version": 3,
  "sources": ["../../@ss/ui/src/components/ss-button/ss-button.models.ts", "../../@ss/ui/src/components/ss-button/ss-button.ts"],
  "sourcesContent": ["import { PropConfigMap } from '../../models/Prop';\n\nexport enum SSButtonProp {\n  TEXT = 'text',\n  DISABLED = 'disabled',\n  LOADING = 'loading',\n  POSITIVE = 'positive',\n  NEGATIVE = 'negative',\n  CLASS = 'class',\n}\n\nexport interface SSButtonProps {\n  [SSButtonProp.TEXT]: string;\n  [SSButtonProp.DISABLED]: boolean;\n  [SSButtonProp.LOADING]: boolean;\n  [SSButtonProp.POSITIVE]: boolean;\n  [SSButtonProp.NEGATIVE]: boolean;\n  [SSButtonProp.CLASS]: string;\n}\n\nexport const ssButtonProps: PropConfigMap<SSButtonProps> = {\n  [SSButtonProp.TEXT]: {\n    default: '',\n    description: 'Human readable content to be displayed',\n    control: 'text',\n  },\n  [SSButtonProp.DISABLED]: {\n    default: false,\n    description: 'Whether the field is locked from use',\n    control: 'boolean',\n  },\n  [SSButtonProp.LOADING]: {\n    default: false,\n    description: 'Whether the button shows loader and is disabled',\n    control: 'boolean',\n  },\n  [SSButtonProp.POSITIVE]: {\n    default: false,\n    description: 'Whether to style the button in a positive manner',\n    control: 'boolean',\n  },\n  [SSButtonProp.NEGATIVE]: {\n    default: false,\n    description: 'Whether to style the button in a negative manner',\n    control: 'boolean',\n  },\n  [SSButtonProp.CLASS]: {\n    default: '',\n    description: 'Any number of custom CSS classes, separated by spaces',\n    control: 'text',\n  },\n};\n", "import { LitElement, html, css } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport '../ss-loader/ss-loader';\n\nimport { theme } from '../../styles/theme';\nimport { SSButtonProp, SSButtonProps } from './ss-button.models';\n\n@customElement('ss-button')\nexport class SSButton extends LitElement {\n  static styles = [\n    theme,\n    css`\n      button {\n        border-radius: 0.5rem;\n\n        &.loading {\n          min-width: 100px;\n        }\n\n        &.positive {\n          background-color: var(--positive-background-color);\n          color: var(--positive-color);\n          border-color: var(--positive-color);\n        }\n\n        &.negative {\n          background-color: var(--negative-background-color);\n          color: var(--negative-color);\n          border-color: var(--negative-color);\n        }\n\n        &.disabled {\n          opacity: 0.5;\n        }\n      }\n    `,\n  ];\n\n  @property() [SSButtonProp.TEXT]: SSButtonProps[SSButtonProp.TEXT] = '';\n\n  @property({ type: Boolean })\n  [SSButtonProp.DISABLED]: SSButtonProps[SSButtonProp.DISABLED] = false;\n\n  @property({ type: Boolean })\n  [SSButtonProp.LOADING]: SSButtonProps[SSButtonProp.LOADING] = false;\n\n  @property({ type: Boolean })\n  [SSButtonProp.POSITIVE]: SSButtonProps[SSButtonProp.POSITIVE] = false;\n\n  @property({ type: Boolean })\n  [SSButtonProp.NEGATIVE]: SSButtonProps[SSButtonProp.NEGATIVE] = false;\n\n  @property() [SSButtonProp.CLASS]: SSButtonProps[SSButtonProp.CLASS] = '';\n\n  @state()\n  get classes() {\n    const classes: Record<string, boolean> = {\n      loading: this.loading,\n      disabled: this.disabled,\n      positive: this.positive,\n      negative: this.negative,\n    };\n    this.class.split(' ').forEach(className => {\n      classes[className] = true;\n    });\n    return classes;\n  }\n\n  private handleClick = (e: CustomEvent): void => {\n    this.dispatchEvent(\n      new CustomEvent('ss-button-clicked', {\n        bubbles: true,\n        composed: true,\n      }),\n    );\n  };\n\n  render() {\n    return html`\n      <button\n        class=${classMap(this.classes)}\n        @click=${this.handleClick}\n        ?disabled=${this.disabled}\n        part=\"button\"\n      >\n        ${this.loading\n          ? html` <ss-loader></ss-loader> `\n          : this.text\n            ? this.text\n            : html`<slot></slot>`}\n      </button>\n    `;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAEA,IAAY;CAAZ,SAAYA,eAAY;AACtB,EAAAA,cAAA,MAAA,IAAA;AACA,EAAAA,cAAA,UAAA,IAAA;AACA,EAAAA,cAAA,SAAA,IAAA;AACA,EAAAA,cAAA,UAAA,IAAA;AACA,EAAAA,cAAA,UAAA,IAAA;AACA,EAAAA,cAAA,OAAA,IAAA;AACF,GAPY,iBAAA,eAAY,CAAA,EAAA;AAkBjB,IAAM,gBAA8C;EACzD,CAAC,aAAa,IAAI,GAAG;IACnB,SAAS;IACT,aAAa;IACb,SAAS;;EAEX,CAAC,aAAa,QAAQ,GAAG;IACvB,SAAS;IACT,aAAa;IACb,SAAS;;EAEX,CAAC,aAAa,OAAO,GAAG;IACtB,SAAS;IACT,aAAa;IACb,SAAS;;EAEX,CAAC,aAAa,QAAQ,GAAG;IACvB,SAAS;IACT,aAAa;IACb,SAAS;;EAEX,CAAC,aAAa,QAAQ,GAAG;IACvB,SAAS;IACT,aAAa;IACb,SAAS;;EAEX,CAAC,aAAa,KAAK,GAAG;IACpB,SAAS;IACT,aAAa;IACb,SAAS;;;;;;;;;;;;;;;;;;ACvCN,IAAM,YAANC,MAAA,cAAuB,WAAU;EAAjC,cAAA;;AA8BO,SAAA,EAAA,IAAwD;AAGpE,SAAA,EAAA,IAAgE;AAGhE,SAAA,EAAA,IAA8D;AAG9D,SAAA,EAAA,IAAgE;AAGhE,SAAA,EAAA,IAAgE;AAEpD,SAAA,EAAA,IAA0D;AAgB9D,SAAA,cAAc,CAAC,MAAwB;AAC7C,WAAK,cACH,IAAI,YAAY,qBAAqB;QACnC,SAAS;QACT,UAAU;OACX,CAAC;IAEN;EAkBF;EAtCE,IAAI,UAAO;AACT,UAAM,UAAmC;MACvC,SAAS,KAAK;MACd,UAAU,KAAK;MACf,UAAU,KAAK;MACf,UAAU,KAAK;;AAEjB,SAAK,MAAM,MAAM,GAAG,EAAE,QAAQ,eAAY;AACxC,cAAQ,SAAS,IAAI;IACvB,CAAC;AACD,WAAO;EACT;EAWA,SAAM;AACJ,WAAO;;gBAEK,SAAS,KAAK,OAAO,CAAC;iBACrB,KAAK,WAAW;oBACb,KAAK,QAAQ;;;UAGvB,KAAK,UACH,kCACA,KAAK,OACH,KAAK,OACL,mBAAmB;;;EAG/B;QAtDa,aAAa,MAAI,KAG7B,aAAa,UAAQ,KAGrB,aAAa,SAAO,KAGpB,aAAa,UAAQ,KAGrB,aAAa,UAAQ,KAET,aAAa,OA3CnBA,IAAA,SAAS;EACd;EACA;;;;;;;;;;;;;;;;;;;;;;;;;GAHGA;AA8BO,WAAA;EAAX,SAAQ;;AAGT,WAAA;EADC,SAAS,EAAE,MAAM,QAAO,CAAE;;AAI3B,WAAA;EADC,SAAS,EAAE,MAAM,QAAO,CAAE;;AAI3B,WAAA;EADC,SAAS,EAAE,MAAM,QAAO,CAAE;;AAI3B,WAAA;EADC,SAAS,EAAE,MAAM,QAAO,CAAE;;AAGf,WAAA;EAAX,SAAQ;;AAGT,WAAA;EADC,MAAK;;AA9CK,WAAQ,WAAA;EADpB,cAAc,WAAW;GACb,QAAQ;",
  "names": ["SSButtonProp", "_a"]
}
