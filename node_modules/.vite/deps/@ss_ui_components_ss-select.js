import {
  repeat
} from "./chunk-HF2IGRDM.js";
import {
  theme
} from "./chunk-3IYY47KY.js";
import {
  customElement,
  property,
  query
} from "./chunk-UZUV3VNE.js";
import "./chunk-RMSEGTBR.js";
import {
  LitElement
} from "./chunk-M5Y2UPGE.js";
import "./chunk-SBXOPBOA.js";
import {
  html
} from "./chunk-32RPEPIA.js";

// node_modules/@ss/ui/dist/components/ss-select/ss-select.events.js
var selectChangedEventName = "select-changed";
var SelectChangedEvent = class extends CustomEvent {
  constructor(payload) {
    super(selectChangedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};

// node_modules/@ss/ui/dist/components/ss-select/ss-select.models.js
var SSSelectProp;
(function(SSSelectProp2) {
  SSSelectProp2["OPTIONS"] = "options";
  SSSelectProp2["SELECTED"] = "selected";
})(SSSelectProp || (SSSelectProp = {}));
var ssSelectProps = {
  [SSSelectProp.OPTIONS]: {
    default: [],
    description: "The options to display in the select",
    control: "text"
  },
  [SSSelectProp.SELECTED]: {
    default: "",
    description: "The value of the selected option",
    control: "text"
  }
};

// node_modules/@ss/ui/dist/components/ss-select/ss-select.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
var _b;
var _a2;
var SSSelect = (_a2 = class extends LitElement {
  constructor() {
    super(...arguments);
    this[_a] = ssSelectProps[SSSelectProp.OPTIONS].default;
    this[_b] = ssSelectProps[SSSelectProp.SELECTED].default;
  }
  get value() {
    return this.selectNode.value;
  }
  handleSelectChanged() {
    this.dispatchEvent(new SelectChangedEvent({ value: this.selectNode.value }));
  }
  render() {
    return html`
      <select @change=${this.handleSelectChanged}>
        ${repeat(this.options, (option) => option.value, (option) => html`
            <option
              value=${option.value}
              ?selected=${`${this.selected}` === `${option.value}`}
            >
              ${option.label}
            </option>
          `)}
      </select>
    `;
  }
}, _a = SSSelectProp.OPTIONS, _b = SSSelectProp.SELECTED, _a2.styles = [theme], _a2);
__decorate([
  property({ type: Array })
], SSSelect.prototype, _a, void 0);
__decorate([
  property()
], SSSelect.prototype, _b, void 0);
__decorate([
  query("select")
], SSSelect.prototype, "selectNode", void 0);
SSSelect = __decorate([
  customElement("ss-select")
], SSSelect);
export {
  SSSelect
};
//# sourceMappingURL=@ss_ui_components_ss-select.js.map
