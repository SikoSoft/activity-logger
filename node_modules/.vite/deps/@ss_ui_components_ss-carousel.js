import {
  classMap
} from "./chunk-NRWESX2P.js";
import {
  theme
} from "./chunk-3IYY47KY.js";
import {
  customElement,
  property,
  query,
  state
} from "./chunk-UZUV3VNE.js";
import "./chunk-RMSEGTBR.js";
import {
  LitElement
} from "./chunk-M5Y2UPGE.js";
import {
  css
} from "./chunk-SBXOPBOA.js";
import {
  html,
  nothing
} from "./chunk-32RPEPIA.js";

// node_modules/@ss/ui/dist/components/ss-icon/svg/svg-profile.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SVGProfile = class SVGProfile2 extends LitElement {
  render() {
    return html`
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M16.5 7.063C16.5 10.258 14.57 13 12 13c-2.572 0-4.5-2.742-4.5-5.938C7.5 3.868 9.16 2 12 2s4.5 1.867 4.5 5.063zM4.102 20.142C4.487 20.6 6.145 22 12 22c5.855 0 7.512-1.4 7.898-1.857a.416.416 0 0 0 .09-.317C19.9 18.944 19.106 15 12 15s-7.9 3.944-7.989 4.826a.416.416 0 0 0 .091.317z"
          fill="currentColor"
        />
      </svg>
    `;
  }
};
SVGProfile = __decorate([
  customElement("svg-profile")
], SVGProfile);

// node_modules/@ss/ui/dist/components/ss-icon/svg/svg-arrow-circle-left.js
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SVGArrowCircleLeft = class SVGArrowCircleLeft2 extends LitElement {
  render() {
    return html`
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          d="M12,2A10,10,0,1,0,22,12,10,10,0,0,0,12,2Zm1.71,12.29a1,1,0,0,1,0,1.42,1,1,0,0,1-1.42,0l-3-3a1,1,0,0,1,0-1.42l3-3a1,1,0,0,1,1.42,1.42L11.41,12Z"
          fill="currentColor"
        ></path>
      </svg>
    `;
  }
};
SVGArrowCircleLeft = __decorate2([
  customElement("svg-arrow-circle-left")
], SVGArrowCircleLeft);

// node_modules/@ss/ui/dist/components/ss-icon/svg/svg-arrow-circle-right.js
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SVGArrowCircleRight = class SVGArrowCircleRight2 extends LitElement {
  render() {
    return html`
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          d="M12,2A10,10,0,1,0,22,12,10,10,0,0,0,12,2Zm2.71,10.71-3,3a1,1,0,0,1-1.42,0,1,1,0,0,1,0-1.42L12.59,12l-2.3-2.29a1,1,0,0,1,1.42-1.42l3,3A1,1,0,0,1,14.71,12.71Z"
          fill="currentColor"
        ></path>
      </svg>
    `;
  }
};
SVGArrowCircleRight = __decorate3([
  customElement("svg-arrow-circle-right")
], SVGArrowCircleRight);

// node_modules/@ss/ui/dist/components/ss-icon/svg/svg-valid-circle.js
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SVGValidCircle = class SVGValidCircle2 extends LitElement {
  render() {
    return html`
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM18.4158 9.70405C18.8055 9.31268 18.8041 8.67952 18.4127 8.28984L17.7041 7.58426C17.3127 7.19458 16.6796 7.19594 16.2899 7.58731L10.5183 13.3838L7.19723 10.1089C6.80398 9.72117 6.17083 9.7256 5.78305 10.1189L5.08092 10.8309C4.69314 11.2241 4.69758 11.8573 5.09083 12.2451L9.82912 16.9174C10.221 17.3039 10.8515 17.301 11.2399 16.911L18.4158 9.70405Z"
          fill="currentColor"
        />
      </svg>
    `;
  }
};
SVGValidCircle = __decorate4([
  customElement("svg-valid-circle")
], SVGValidCircle);

// node_modules/@ss/ui/dist/components/ss-icon/svg/svg-invalid-circle.js
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SVGInvalidCircle = class SVGInvalidCircle2 extends LitElement {
  render() {
    return html`
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM7.75736 7.05025C8.14788 6.65973 8.78105 6.65973 9.17157 7.05025L12 9.87868L14.8284 7.05025C15.219 6.65973 15.8521 6.65973 16.2426 7.05025L16.9497 7.75736C17.3403 8.14788 17.3403 8.78105 16.9497 9.17157L14.1213 12L16.9497 14.8284C17.3403 15.219 17.3403 15.8521 16.9497 16.2426L16.2426 16.9497C15.8521 17.3403 15.219 17.3403 14.8284 16.9497L12 14.1213L9.17157 16.9497C8.78105 17.3403 8.14788 17.3403 7.75736 16.9497L7.05025 16.2426C6.65973 15.8521 6.65973 15.219 7.05025 14.8284L9.87868 12L7.05025 9.17157C6.65973 8.78105 6.65973 8.14788 7.05025 7.75736L7.75736 7.05025Z"
          fill="currentColor"
        />
      </svg>
    `;
  }
};
SVGInvalidCircle = __decorate5([
  customElement("svg-invalid-circle")
], SVGInvalidCircle);

// node_modules/@ss/ui/dist/components/ss-icon/svg/svg-gear.js
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SVGGear = class SVGGear2 extends LitElement {
  render() {
    return html`
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          d="M841.36,187.993L736.009,82.64c-6.51-6.51-16.622-7.735-24.499-2.968l-54.938,33.252
		c-26.704-14.917-55.296-26.858-85.328-35.375l-15.326-62.326C553.719,6.284,545.702,0,536.496,0h-148.99
		c-9.206,0-17.223,6.284-19.421,15.224L352.759,77.55c-30.032,8.517-58.624,20.458-85.328,35.375l-54.938-33.252
		c-7.876-4.767-17.989-3.542-24.499,2.968L82.642,187.993c-6.51,6.51-7.735,16.622-2.968,24.498l33.252,54.938
		c-14.917,26.704-26.857,55.296-35.375,85.328l-62.326,15.326c-8.94,2.199-15.224,10.216-15.224,19.422v148.99
		c0,9.206,6.284,17.223,15.224,19.421l62.326,15.326c8.517,30.032,20.458,58.624,35.375,85.328l-33.252,54.938
		c-4.767,7.876-3.542,17.988,2.968,24.498L187.993,841.36c6.51,6.509,16.622,7.734,24.499,2.968l54.938-33.252
		c26.704,14.917,55.295,26.856,85.328,35.375l15.326,62.326c2.198,8.939,10.215,15.224,19.421,15.224h148.99
		c9.206,0,17.223-6.284,19.421-15.224l15.326-62.326c30.032-8.518,58.624-20.458,85.328-35.375l54.938,33.252
		c7.876,4.767,17.989,3.542,24.499-2.968l105.353-105.353c6.51-6.51,7.734-16.622,2.968-24.498l-33.252-54.938
		c14.917-26.704,26.856-55.296,35.375-85.328l62.326-15.326C917.716,553.72,924,545.703,924,536.497v-148.99
		c0-9.206-6.284-17.223-15.224-19.421L846.45,352.76c-8.518-30.032-20.458-58.624-35.375-85.328l33.252-54.938
		C849.095,204.615,847.87,194.502,841.36,187.993z M462.001,670.481c-115.141,0-208.48-93.341-208.48-208.481
		c0-115.141,93.34-208.481,208.48-208.481S670.482,346.859,670.482,462C670.482,577.14,577.142,670.481,462.001,670.481z"
          fill="currentColor"
        />
      </svg>
    `;
  }
};
SVGGear = __decorate6([
  customElement("svg-gear")
], SVGGear);

// node_modules/@ss/ui/dist/components/ss-icon/svg/svg-delete.js
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SVGDelete = class SVGDelete2 extends LitElement {
  render() {
    return html`
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          d="M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H8Z"
          fill="currentColor"
        />
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
          fill="currentColor"
        />
      </svg>
    `;
  }
};
SVGDelete = __decorate7([
  customElement("svg-delete")
], SVGDelete);

// node_modules/@ss/ui/dist/components/ss-icon/ss-icon.models.js
var IconName;
(function(IconName2) {
  IconName2["PROFILE"] = "profile";
  IconName2["ARROW_CIRCLE_LEFT"] = "arrowCircleLeft";
  IconName2["ARROW_CIRCLE_RIGHT"] = "arrowCircleRight";
  IconName2["VALID_CIRCLE"] = "validCircle";
  IconName2["INVALID_CIRCLE"] = "invalidCircle";
  IconName2["GEAR"] = "gear";
  IconName2["DELETE"] = "delete";
})(IconName || (IconName = {}));
var SSIconProp;
(function(SSIconProp2) {
  SSIconProp2["NAME"] = "name";
  SSIconProp2["SIZE"] = "size";
  SSIconProp2["COLOR"] = "color";
})(SSIconProp || (SSIconProp = {}));
var ssIconProps = {
  [SSIconProp.NAME]: {
    default: IconName.PROFILE,
    description: "The name of the icon to display",
    control: "text"
  },
  [SSIconProp.SIZE]: {
    default: 24,
    description: "The size of the icon in pixels",
    control: "number"
  },
  [SSIconProp.COLOR]: {
    default: "#000",
    description: "The color of the icon",
    control: "text"
  }
};

// node_modules/@ss/ui/dist/components/ss-icon/ss-icon.js
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
var _b;
var _c;
var _a2;
var SSIcon = (_a2 = class extends LitElement {
  constructor() {
    super(...arguments);
    this[_a] = ssIconProps[SSIconProp.NAME].default;
    this[_b] = ssIconProps[SSIconProp.COLOR].default;
    this[_c] = ssIconProps[SSIconProp.SIZE].default;
  }
  updated(changedProperties) {
    super.updated(changedProperties);
    if (changedProperties.has(SSIconProp.SIZE)) {
      this.style.setProperty("--size", `${this[SSIconProp.SIZE]}px`);
    }
  }
  renderIcon() {
    switch (this[SSIconProp.NAME]) {
      case IconName.PROFILE:
        return html`<svg-profile></svg-profile>`;
      case IconName.ARROW_CIRCLE_LEFT:
        return html`<svg-arrow-circle-left></svg-arrow-circle-left>`;
      case IconName.ARROW_CIRCLE_RIGHT:
        return html`<svg-arrow-circle-right></svg-arrow-circle-right>`;
      case IconName.VALID_CIRCLE:
        return html`<svg-valid-circle></svg-valid-circle>`;
      case IconName.INVALID_CIRCLE:
        return html`<svg-invalid-circle></svg-invalid-circle>`;
      case IconName.GEAR:
        return html`<svg-gear></svg-gear>`;
      case IconName.DELETE:
        return html`<svg-delete></svg-delete>`;
      default:
        return nothing;
    }
  }
  render() {
    return html`
      <span
        class="icon"
        style="--color: ${this[SSIconProp.COLOR]}; --size: ${this[SSIconProp.SIZE]}px;"
      >
        ${this.renderIcon()}
      </span>
    `;
  }
}, _a = SSIconProp.NAME, _b = SSIconProp.COLOR, _c = SSIconProp.SIZE, _a2.styles = [
  theme,
  css`
      :host {
        display: inline-block;
        vertical-align: middle;
        width: var(--size, 24px);
        height: var(--size, 24px);
      }

      .icon {
        display: inline-block;
        width: var(--size, 24px);
        height: var(--size, 24px);

        & > * {
          display: inline-block;
          width: 100%;
          height: 100%;
          color: var(--color, #000);
        }
      }
    `
], _a2);
__decorate8([
  property()
], SSIcon.prototype, _a, void 0);
__decorate8([
  property()
], SSIcon.prototype, _b, void 0);
__decorate8([
  property({ type: Number })
], SSIcon.prototype, _c, void 0);
SSIcon = __decorate8([
  customElement("ss-icon")
], SSIcon);

// node_modules/@ss/ui/dist/components/ss-carousel/ss-carousel.models.js
var SSCarouselProp;
(function(SSCarouselProp2) {
  SSCarouselProp2["INFINITE"] = "infinite";
  SSCarouselProp2["NAVIGATION_INDEX"] = "navigationIndex";
  SSCarouselProp2["SHOW_BUTTONS"] = "showButtons";
  SSCarouselProp2["MOUSE_SCROLL"] = "mouseScroll";
  SSCarouselProp2["WIDTH"] = "width";
  SSCarouselProp2["HEIGHT"] = "height";
  SSCarouselProp2["GAP"] = "gap";
  SSCarouselProp2["PERSPECTIVE"] = "perspective";
  SSCarouselProp2["DISCRETE"] = "discrete";
})(SSCarouselProp || (SSCarouselProp = {}));
var ssCarouselProps = {
  [SSCarouselProp.INFINITE]: {
    default: false,
    control: "boolean",
    description: "Whether the carousel should loop infinitely"
  },
  [SSCarouselProp.NAVIGATION_INDEX]: {
    default: 0,
    control: "number",
    description: "The index of the active slide"
  },
  [SSCarouselProp.SHOW_BUTTONS]: {
    default: false,
    control: "boolean",
    description: "Whether to show the navigation buttons"
  },
  [SSCarouselProp.MOUSE_SCROLL]: {
    default: false,
    control: "boolean",
    description: "Whether to allow mouse scrolling"
  },
  [SSCarouselProp.WIDTH]: {
    default: `210px`,
    control: "text",
    description: "The width of the carousel"
  },
  [SSCarouselProp.HEIGHT]: {
    default: 140,
    control: "number",
    description: "The height of the carousel"
  },
  [SSCarouselProp.GAP]: {
    default: 10,
    control: "number",
    description: "The gap between frames"
  },
  [SSCarouselProp.PERSPECTIVE]: {
    default: 500,
    control: "number",
    description: "The perspective of the carousel"
  },
  [SSCarouselProp.DISCRETE]: {
    default: false,
    control: "boolean",
    description: "Whether the carousel should show inactive frames when it does not have contact"
  }
};

// node_modules/@ss/ui/dist/components/ss-carousel/ss-carousel.events.js
var carouselSlideChangedEventName = "carousel-slide-changed";
var CarouselSlideChangedEvent = class extends CustomEvent {
  constructor(payload) {
    super(carouselSlideChangedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};

// node_modules/@ss/ui/dist/components/ss-carousel/ss-carousel.js
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a3;
var _b2;
var _c2;
var _d;
var _e;
var _f;
var _g;
var _h;
var _a4;
var SSCarousel = (_a4 = class extends LitElement {
  constructor() {
    super(...arguments);
    this.keyframes = `
      @keyframes become-active {
        0% {
        --slide-scale: 1;
        }
        50% {
        --slide-scale: 1.2;
        }
        100% {
        --slide-scale: 1;
        }
      }
    `;
    this[_a3] = ssCarouselProps[SSCarouselProp.INFINITE].default;
    this[_b2] = ssCarouselProps[SSCarouselProp.NAVIGATION_INDEX].default;
    this[_c2] = ssCarouselProps[SSCarouselProp.SHOW_BUTTONS].default;
    this[_d] = ssCarouselProps[SSCarouselProp.WIDTH].default;
    this[_e] = ssCarouselProps[SSCarouselProp.HEIGHT].default;
    this[_f] = ssCarouselProps[SSCarouselProp.GAP].default;
    this[_g] = ssCarouselProps[SSCarouselProp.PERSPECTIVE].default;
    this[_h] = ssCarouselProps[SSCarouselProp.DISCRETE].default;
    this.initialized = false;
    this.actualWidth = 0;
    this.mouseOver = false;
    this.hasContact = false;
    this.startContactPoint = { x: 0, y: 0 };
    this.latestContactPoint = { x: 0, y: 0 };
    this.dragDistance = 0;
  }
  get totalSlides() {
    const total = this.slides.length;
    return total;
  }
  get slideDegrees() {
    return 360 / this.totalSlides;
  }
  get slideTransition() {
    return this.totalSlides > 1 ? Math.round(this.actualWidth / 2 / Math.tan(Math.PI / this.totalSlides)) : 0;
  }
  get showBackButton() {
    return this.showButtons && this.totalSlides > 1 && (this.infinite || this.slideIndex > 0);
  }
  get showForwardButton() {
    return this.showButtons && this.totalSlides > 1 && (this.infinite || this.slideIndex < this.totalSlides - 1);
  }
  get classes() {
    return {
      wrapper: true,
      "has-contact": this.hasContact,
      discrete: this.discrete,
      initializing: !this.initialized
    };
  }
  get minDragDistance() {
    return 10;
  }
  get slideIndex() {
    let index = this.navigationIndex % this.totalSlides;
    if (index < 0) {
      index = this.totalSlides + index;
    }
    return index;
  }
  get slides() {
    return [...this.children].filter((child) => child.nodeName !== "STYLE");
  }
  connectedCallback() {
    super.connectedCallback();
  }
  async firstUpdated(_changedProperties) {
    super.firstUpdated(_changedProperties);
    await this.updateComplete;
    this.updateActualWidth();
    this.setupSlides();
    this.setupSlot();
    this.setupEventListeners();
    this.setupStyles();
    setTimeout(() => {
      this.initialized = true;
    }, 50);
  }
  setupSlot() {
    var _a5;
    const slotNode = (_a5 = this.shadowRoot) == null ? void 0 : _a5.querySelector("slot");
    if (slotNode) {
      slotNode.addEventListener("slotchange", () => {
        this.setupSlides();
        this.updateSlides();
      });
    }
  }
  setupSlides() {
    if (this.slides.length > 0) {
      this.slides.forEach((slide, index) => {
        if (slide.classList.contains("slide")) {
          slide.classList.remove("slide");
        }
        slide.classList.add("slide");
        slide.setAttribute("data-index", index.toString());
        slide.addEventListener("touchstart", (e) => {
          if (index === this.slideIndex) {
            this.hasContact = true;
            this.startContactPoint = {
              x: e.touches[0].clientX,
              y: e.touches[0].clientY
            };
            this.latestContactPoint = {
              x: e.touches[0].clientX,
              y: e.touches[0].clientY
            };
          }
        });
      });
    }
  }
  setupEventListeners() {
    document.addEventListener("touchmove", (e) => {
      if (this.hasContact) {
        this.latestContactPoint = {
          x: e.touches[0].clientX,
          y: e.touches[0].clientY
        };
        const xDiff = Math.abs(this.latestContactPoint.x - this.startContactPoint.x);
        this.dragDistance = xDiff;
      }
    });
    document.addEventListener("touchend", (e) => {
      this.dragDistance = 0;
      const xDiff = this.latestContactPoint.x - this.startContactPoint.x;
      if (this.hasContact) {
        if (xDiff >= this.minDragDistance) {
          this.back();
        }
        if (xDiff <= -this.minDragDistance) {
          this.forward();
        }
      }
      this.hasContact = false;
    });
    this.carousel.addEventListener("contextmenu", (e) => {
      if (this.hasContact) {
        e.preventDefault();
      }
    });
    this.carousel.addEventListener("mouseenter", () => {
      this.mouseOver = true;
    });
    this.carousel.addEventListener("mouseleave", () => {
      this.mouseOver = false;
    });
    document.addEventListener("scroll", (e) => {
      if (this.mouseOver) {
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    });
  }
  setupStyles() {
    var _a5;
    const style = window.document.createElement("style");
    style.textContent = this.keyframes;
    (_a5 = this.parentElement) == null ? void 0 : _a5.appendChild(style);
    try {
      window.CSS.registerProperty({
        name: "--slide-scale",
        syntax: "<number>",
        inherits: false,
        initialValue: "1"
      });
    } catch (e) {
    }
  }
  updated(_changedProperties) {
    super.updated(_changedProperties);
    this.updateActualWidth();
    if (_changedProperties.has(SSCarouselProp.NAVIGATION_INDEX)) {
      this.updateSlides();
      this.updateCarousel();
    }
  }
  updateActualWidth() {
    const width = this.getBoundingClientRect().width;
    this.actualWidth = width;
  }
  updateSlides() {
    this.slides.forEach((c, index) => {
      const child = c;
      if (child.classList.contains("active-initialized")) {
        child.classList.remove("active-initialized");
      }
      if (child.classList.contains("active")) {
        child.classList.remove("active");
      }
      if (child.classList.contains("previous")) {
        child.classList.remove("previous");
      }
      if (child.classList.contains("next")) {
        child.classList.remove("next");
      }
      if (index === this.slideIndex - 1 || this.slideIndex === 0 && index === this.totalSlides - 1) {
        child.classList.add("previous");
      }
      if (index === this.slideIndex) {
        child.classList.add("active");
        if (this.initialized) {
          child.classList.add("active-initialized");
        }
      }
      if (index === this.slideIndex + 1 || this.slideIndex === this.totalSlides - 1 && index === 0) {
        child.classList.add("next");
      }
    });
  }
  back() {
    if (!this.infinite && this.slideIndex === 0) {
      return;
    }
    this.setActiveIndex(this.navigationIndex - 1);
    this.updateCarousel();
  }
  forward() {
    if (!this.infinite && this.slideIndex === this.totalSlides - 1) {
      return;
    }
    this.setActiveIndex(this.navigationIndex + 1);
    this.updateCarousel();
  }
  setActiveIndex(index) {
    this.navigationIndex = index;
    this.dispatchEvent(new CarouselSlideChangedEvent({
      navigationIndex: this.navigationIndex,
      slideIndex: this.slideIndex
    }));
  }
  updateCarousel() {
    const angle = this.navigationIndex / this.totalSlides * -360;
    this.carousel.style.transform = `translateZ(-${this.slideTransition}px) rotateY(${angle}deg)`;
  }
  render() {
    return html`
      <style>
        .carousel {
          transform: translateZ(-${this.slideTransition}px);
        }
        ${[...Array(this.totalSlides)].map((_, i) => css`
            ::slotted(.slide:nth-child(${i + 1})) {
              transform: rotateY(${i * this.slideDegrees}deg)
                translateZ(${this.slideTransition}px)
                scale(var(--slide-scale, 1));
            }
          `)}
      </style>
      <div
        class=${classMap(this.classes)}
        style=${`
          --drag-distance: ${this.dragDistance};
          --scene-width: ${this.width};
          --scene-height: ${this.height}px;
          --gap: ${this.gap}px;
          --perspective: ${this.perspective}px;
        `}
      >
        <div class="scene">
          <div class="carousel">
            <slot></slot>
          </div>
          ${this.showBackButton ? html`
                <button
                  class="back"
                  @click=${(e) => {
      this.back();
      e.stopPropagation();
    }}
                >
                  <ss-icon
                    name="arrowCircleLeft"
                    color="#000"
                    size="48"
                  ></ss-icon>
                </button>
              ` : nothing}
          ${this.showForwardButton ? html`
                <button
                  class="forward"
                  @click=${(e) => {
      this.forward();
      e.stopPropagation();
    }}
                >
                  <ss-icon
                    name="arrowCircleRight"
                    color="#000"
                    size="48"
                  ></ss-icon>
                </button>
              ` : nothing}
        </div>
      </div>
    `;
  }
}, _a3 = SSCarouselProp.INFINITE, _b2 = SSCarouselProp.NAVIGATION_INDEX, _c2 = SSCarouselProp.SHOW_BUTTONS, _d = SSCarouselProp.WIDTH, _e = SSCarouselProp.HEIGHT, _f = SSCarouselProp.GAP, _g = SSCarouselProp.PERSPECTIVE, _h = SSCarouselProp.DISCRETE, _a4.styles = [
  theme,
  css`
      :host {
        display: block;
        width: 100%;
      }

      .scene {
        width: var(--scene-width);
        height: var(--scene-height);
        position: relative;
        perspective: var(--perspective);
      }

      .back,
      .forward {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        display: inline-block;
        border-radius: 50%;
        transition: transform 0.2s;
        line-height: 0rem;
        padding: 0;
        background: transparent;
        border: none;
        width: auto;

        &:active {
          transform: translateY(-50%) scale(1.5);
          box-shadow: 0 0 5px rgba(0, 0, 0, 0.75);
          opacity: 1;
        }
      }

      .back {
        position: absolute;
        top: 50%;
        right: 100%;
        transform: translateY(-50%);
      }

      .forward {
        position: absolute;
        top: 50%;
        left: 100%;
        transform: translateY(-50%);
      }

      .carousel {
        width: 100%;
        height: 100%;
        position: absolute;
        transform-style: preserve-3d;
        transition: transform 0.5s;
      }

      ::slotted(.slide) {
        position: absolute;
        width: calc(var(--scene-width) - var(--gap) * 2);
        height: calc(var(--scene-height) - var(--gap) * 2);
        left: var(--gap);
        top: var(--gap);
        transition: all 0.2s;
        opacity: 0.25;
      }

      ::slotted(.slide.active) {
        opacity: 1;
      }

      ::slotted(.slide.active-initialized) {
        opacity: 1;
        animation: become-active 200ms linear;
        animation-delay: 50ms;
      }

      ::slotted(.slide.previous),
      ::slotted(.slide.next) {
        opacity: 0.75;
      }

      ::slotted(.slide.previous)::after,
      ::slotted(.slide.next)::after {
        content: '';
        position: absolute;
        width: calc(var(--scene-width) - var(--gap) * 2);
        height: calc(var(--scene-height) - var(--gap) * 2);
        left: 0px;
        top: 0px;
      }

      ::slotted(.slide.previous)::after {
        background: linear-gradient(to right, rgba(0, 0, 0, 0.2), transparent);
      }

      ::slotted(.slide.next)::after {
        background: linear-gradient(to left, rgba(0, 0, 0, 0.2), transparent);
      }

      .initializing {
        .carousel {
          transition: none;
        }
        ::slotted(.slide) {
          transition: none;
        }
        ::slotted(.slide.active) {
          animation: none;
        }
      }

      .has-contact {
        ::slotted(.slide) {
          --slide-scale: calc(
            1 - calc(min(calc(var(--drag-distance) / 50), 1) * 0.2)
          );
        }

        ::slotted(.slide.active) {
          --slide-scale: calc(
            1 - calc(min(calc(var(--drag-distance) / 50), 1) * 0.4)
          );
        }
      }

      .discrete:not(.has-contact) {
        ::slotted(.slide) {
          opacity: 0;
        }

        ::slotted(.slide.active) {
          opacity: 1;
        }
      }
    `
], _a4);
__decorate9([
  property({ type: Boolean })
], SSCarousel.prototype, _a3, void 0);
__decorate9([
  property({ type: Number, reflect: true })
], SSCarousel.prototype, _b2, void 0);
__decorate9([
  property({ type: Boolean })
], SSCarousel.prototype, _c2, void 0);
__decorate9([
  property({ reflect: true })
], SSCarousel.prototype, _d, void 0);
__decorate9([
  property({ type: Number, reflect: true })
], SSCarousel.prototype, _e, void 0);
__decorate9([
  property({ type: Number, reflect: true })
], SSCarousel.prototype, _f, void 0);
__decorate9([
  property({ type: Number, reflect: true })
], SSCarousel.prototype, _g, void 0);
__decorate9([
  property({ type: Boolean })
], SSCarousel.prototype, _h, void 0);
__decorate9([
  query(".carousel")
], SSCarousel.prototype, "carousel", void 0);
__decorate9([
  state()
], SSCarousel.prototype, "initialized", void 0);
__decorate9([
  state()
], SSCarousel.prototype, "totalSlides", null);
__decorate9([
  state()
], SSCarousel.prototype, "slideDegrees", null);
__decorate9([
  state()
], SSCarousel.prototype, "slideTransition", null);
__decorate9([
  state()
], SSCarousel.prototype, "showBackButton", null);
__decorate9([
  state()
], SSCarousel.prototype, "showForwardButton", null);
__decorate9([
  state()
], SSCarousel.prototype, "actualWidth", void 0);
__decorate9([
  state()
], SSCarousel.prototype, "classes", null);
__decorate9([
  state()
], SSCarousel.prototype, "slideIndex", null);
__decorate9([
  state()
], SSCarousel.prototype, "mouseOver", void 0);
__decorate9([
  state()
], SSCarousel.prototype, "hasContact", void 0);
__decorate9([
  state()
], SSCarousel.prototype, "startContactPoint", void 0);
__decorate9([
  state()
], SSCarousel.prototype, "latestContactPoint", void 0);
__decorate9([
  state()
], SSCarousel.prototype, "dragDistance", void 0);
SSCarousel = __decorate9([
  customElement("ss-carousel")
], SSCarousel);
export {
  SSCarousel
};
//# sourceMappingURL=@ss_ui_components_ss-carousel.js.map
