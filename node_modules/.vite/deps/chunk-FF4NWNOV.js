import {
  classMap
} from "./chunk-NRWESX2P.js";
import {
  theme
} from "./chunk-3IYY47KY.js";
import {
  customElement,
  property,
  state
} from "./chunk-UZUV3VNE.js";
import {
  LitElement
} from "./chunk-M5Y2UPGE.js";
import {
  css
} from "./chunk-SBXOPBOA.js";
import {
  html
} from "./chunk-32RPEPIA.js";

// node_modules/@ss/ui/dist/components/ss-button/ss-button.models.js
var SSButtonProp;
(function(SSButtonProp2) {
  SSButtonProp2["TEXT"] = "text";
  SSButtonProp2["DISABLED"] = "disabled";
  SSButtonProp2["LOADING"] = "loading";
  SSButtonProp2["POSITIVE"] = "positive";
  SSButtonProp2["NEGATIVE"] = "negative";
  SSButtonProp2["CLASS"] = "class";
})(SSButtonProp || (SSButtonProp = {}));
var ssButtonProps = {
  [SSButtonProp.TEXT]: {
    default: "",
    description: "Human readable content to be displayed",
    control: "text"
  },
  [SSButtonProp.DISABLED]: {
    default: false,
    description: "Whether the field is locked from use",
    control: "boolean"
  },
  [SSButtonProp.LOADING]: {
    default: false,
    description: "Whether the button shows loader and is disabled",
    control: "boolean"
  },
  [SSButtonProp.POSITIVE]: {
    default: false,
    description: "Whether to style the button in a positive manner",
    control: "boolean"
  },
  [SSButtonProp.NEGATIVE]: {
    default: false,
    description: "Whether to style the button in a negative manner",
    control: "boolean"
  },
  [SSButtonProp.CLASS]: {
    default: "",
    description: "Any number of custom CSS classes, separated by spaces",
    control: "text"
  }
};

// node_modules/@ss/ui/dist/components/ss-button/ss-button.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
var _b;
var _c;
var _d;
var _e;
var _f;
var _a2;
var SSButton = (_a2 = class extends LitElement {
  constructor() {
    super(...arguments);
    this[_a] = "";
    this[_b] = false;
    this[_c] = false;
    this[_d] = false;
    this[_e] = false;
    this[_f] = "";
    this.handleClick = (e) => {
      this.dispatchEvent(new CustomEvent("ss-button-clicked", {
        bubbles: true,
        composed: true
      }));
    };
  }
  get classes() {
    const classes = {
      loading: this.loading,
      disabled: this.disabled,
      positive: this.positive,
      negative: this.negative
    };
    this.class.split(" ").forEach((className) => {
      classes[className] = true;
    });
    return classes;
  }
  render() {
    return html`
      <button
        class=${classMap(this.classes)}
        @click=${this.handleClick}
        ?disabled=${this.disabled}
        part="button"
      >
        ${this.loading ? html` <ss-loader></ss-loader> ` : this.text ? this.text : html`<slot></slot>`}
      </button>
    `;
  }
}, _a = SSButtonProp.TEXT, _b = SSButtonProp.DISABLED, _c = SSButtonProp.LOADING, _d = SSButtonProp.POSITIVE, _e = SSButtonProp.NEGATIVE, _f = SSButtonProp.CLASS, _a2.styles = [
  theme,
  css`
      button {
        border-radius: 0.5rem;

        &.loading {
          min-width: 100px;
        }

        &.positive {
          background-color: var(--positive-background-color);
          color: var(--positive-color);
          border-color: var(--positive-color);
        }

        &.negative {
          background-color: var(--negative-background-color);
          color: var(--negative-color);
          border-color: var(--negative-color);
        }

        &.disabled {
          opacity: 0.5;
        }
      }
    `
], _a2);
__decorate([
  property()
], SSButton.prototype, _a, void 0);
__decorate([
  property({ type: Boolean })
], SSButton.prototype, _b, void 0);
__decorate([
  property({ type: Boolean })
], SSButton.prototype, _c, void 0);
__decorate([
  property({ type: Boolean })
], SSButton.prototype, _d, void 0);
__decorate([
  property({ type: Boolean })
], SSButton.prototype, _e, void 0);
__decorate([
  property()
], SSButton.prototype, _f, void 0);
__decorate([
  state()
], SSButton.prototype, "classes", null);
SSButton = __decorate([
  customElement("ss-button")
], SSButton);

export {
  SSButton
};
//# sourceMappingURL=chunk-FF4NWNOV.js.map
