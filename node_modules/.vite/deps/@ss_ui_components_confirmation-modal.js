import "./chunk-FF4NWNOV.js";
import "./chunk-2EYY3Q7P.js";
import {
  classMap
} from "./chunk-NRWESX2P.js";
import {
  theme
} from "./chunk-3IYY47KY.js";
import {
  customElement,
  property,
  query,
  state
} from "./chunk-UZUV3VNE.js";
import "./chunk-RMSEGTBR.js";
import {
  LitElement
} from "./chunk-M5Y2UPGE.js";
import {
  css
} from "./chunk-SBXOPBOA.js";
import {
  html,
  nothing
} from "./chunk-32RPEPIA.js";

// node_modules/@ss/ui/dist/components/confirmation-modal/confirmation-modal.models.js
var ConfirmationModalProp;
(function(ConfirmationModalProp2) {
  ConfirmationModalProp2["OPEN"] = "open";
  ConfirmationModalProp2["MESSAGE"] = "message";
  ConfirmationModalProp2["ACCEPT_TEXT"] = "acceptText";
  ConfirmationModalProp2["DECLINE_TEXT"] = "declineText";
})(ConfirmationModalProp || (ConfirmationModalProp = {}));
var confirmationModalProps = {
  [ConfirmationModalProp.OPEN]: {
    default: false,
    control: "boolean",
    description: "Whether the pop-up is open or not"
  },
  [ConfirmationModalProp.MESSAGE]: {
    default: "Are you sure?",
    control: "text",
    description: "The message to display in the pop-up"
  },
  [ConfirmationModalProp.ACCEPT_TEXT]: {
    default: "Accept",
    control: "text",
    description: "Text for the accept button"
  },
  [ConfirmationModalProp.DECLINE_TEXT]: {
    default: "Decline",
    control: "text",
    description: "Text for the decline button"
  }
};

// node_modules/@ss/ui/dist/components/confirmation-modal/confirmation-modal.events.js
var confirmationAcceptedEventName = "confirmation-accepted";
var ConfirmationAcceptedEvent = class extends CustomEvent {
  constructor(payload) {
    super(confirmationAcceptedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};
var confirmationDeclinedEventName = "confirmation-declined";
var ConfirmationDeclinedEvent = class extends CustomEvent {
  constructor(payload) {
    super(confirmationDeclinedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};

// node_modules/@ss/ui/dist/components/pop-up/pop-up.models.js
var PopUpProp;
(function(PopUpProp2) {
  PopUpProp2["OPEN"] = "open";
  PopUpProp2["CLOSE_BUTTON"] = "closeButton";
  PopUpProp2["CLOSE_ON_OUTSIDE_CLICK"] = "closeOnOutsideClick";
  PopUpProp2["CLOSE_ON_ESC"] = "closeOnEsc";
})(PopUpProp || (PopUpProp = {}));
var popUpProps = {
  [PopUpProp.OPEN]: {
    default: false,
    control: "boolean",
    description: "Whether the pop-up is open or not"
  },
  [PopUpProp.CLOSE_BUTTON]: {
    default: false,
    control: "boolean",
    description: "Whether to show the close button"
  },
  [PopUpProp.CLOSE_ON_OUTSIDE_CLICK]: {
    default: false,
    control: "boolean",
    description: "Whether to close the pop-up when clicking outside of it"
  },
  [PopUpProp.CLOSE_ON_ESC]: {
    default: false,
    control: "boolean",
    description: "Whether to close the pop-up when pressing the ESC key"
  }
};

// node_modules/@ss/ui/dist/components/pop-up/pop-up.events.js
var popUpClosedEventName = "pop-up-closed";
var PopUpClosedEvent = class extends CustomEvent {
  constructor(payload) {
    super(popUpClosedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};

// node_modules/@ss/ui/dist/components/pop-up/pop-up.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
var _b;
var _c;
var _d;
var _a2;
var PopUp = (_a2 = class extends LitElement {
  constructor() {
    super(...arguments);
    this[_a] = popUpProps[PopUpProp.OPEN].default;
    this[_b] = popUpProps[PopUpProp.CLOSE_BUTTON].default;
    this[_c] = popUpProps[PopUpProp.CLOSE_ON_OUTSIDE_CLICK].default;
    this[_d] = popUpProps[PopUpProp.CLOSE_ON_ESC].default;
    this.newlyOpened = false;
    this.handleClickOutside = (e) => {
      if (!this.newlyOpened && this[PopUpProp.CLOSE_ON_OUTSIDE_CLICK] && this[PopUpProp.OPEN] && !e.composedPath().includes(this.container)) {
        this.dispatchEvent(new PopUpClosedEvent({}));
      }
    };
    this.handleKeyDown = (e) => {
      if (this[PopUpProp.CLOSE_ON_ESC] && e.key === "Escape") {
        this.dispatchEvent(new PopUpClosedEvent({}));
      }
    };
  }
  get classes() {
    return {
      "pop-up": true,
      open: this.open
    };
  }
  connectedCallback() {
    super.connectedCallback();
    document.addEventListener("keydown", this.handleKeyDown);
    document.addEventListener("click", this.handleClickOutside);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    document.removeEventListener("keydown", this.handleKeyDown);
    document.removeEventListener("click", this.handleClickOutside);
  }
  updated(_changedProperties) {
    super.updated(_changedProperties);
    if (_changedProperties.has(PopUpProp.OPEN)) {
      if (this[PopUpProp.OPEN]) {
        this.newlyOpened = true;
        setTimeout(() => {
          this.newlyOpened = false;
        }, 100);
      } else {
        this.newlyOpened = false;
      }
    }
  }
  render() {
    return html`
      <div class=${classMap(this.classes)} part="container">
        <div class="inner">
          ${this[PopUpProp.CLOSE_BUTTON] ? html`
                <div
                  class="close-button"
                  @click=${() => {
      this.dispatchEvent(new PopUpClosedEvent({}));
    }}
                >
                  &#215;
                </div>
              ` : nothing}
          <slot></slot>
        </div>
      </div>
    `;
  }
}, _a = PopUpProp.OPEN, _b = PopUpProp.CLOSE_BUTTON, _c = PopUpProp.CLOSE_ON_OUTSIDE_CLICK, _d = PopUpProp.CLOSE_ON_ESC, _a2.styles = [
  theme,
  css`
      :host {
        display: block;
      }

      .pop-up {
        display: none;
        position: fixed;
        width: 50vw;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: 1px solid #666;

        z-index: 1000;
        border-radius: 0.5rem;
        box-shadow: 0 0 5rem rgba(0, 0, 0, 0.75);

        &.open {
          display: block;
        }

        .inner {
          padding: 3rem;
          position: relative;
          width: 100%;
          height: 100%;
          box-sizing: border-box;

          .close-button {
            position: absolute;
            top: 0rem;
            right: 0.5rem;
            font-size: 1.5rem;
            cursor: pointer;
          }
        }
      }
    `
], _a2);
__decorate([
  property({ type: Boolean })
], PopUp.prototype, _a, void 0);
__decorate([
  property({ type: Boolean })
], PopUp.prototype, _b, void 0);
__decorate([
  property({ type: Boolean })
], PopUp.prototype, _c, void 0);
__decorate([
  property({ type: Boolean })
], PopUp.prototype, _d, void 0);
__decorate([
  state()
], PopUp.prototype, "newlyOpened", void 0);
__decorate([
  query(".pop-up")
], PopUp.prototype, "container", void 0);
__decorate([
  state()
], PopUp.prototype, "classes", null);
PopUp = __decorate([
  customElement("pop-up")
], PopUp);

// node_modules/@ss/ui/dist/components/confirmation-modal/confirmation-modal.js
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a3;
var _b2;
var _c2;
var _d2;
var _a4;
var ConfirmationModal = (_a4 = class extends LitElement {
  constructor() {
    super(...arguments);
    this[_a3] = confirmationModalProps[ConfirmationModalProp.OPEN].default;
    this[_b2] = confirmationModalProps[ConfirmationModalProp.MESSAGE].default;
    this[_c2] = confirmationModalProps[ConfirmationModalProp.ACCEPT_TEXT].default;
    this[_d2] = confirmationModalProps[ConfirmationModalProp.DECLINE_TEXT].default;
    this.newlyOpened = false;
  }
  get classes() {
    return {
      "confirmation-modal": true,
      open: this.open
    };
  }
  accept() {
    this.dispatchEvent(new ConfirmationAcceptedEvent({}));
    this.close();
  }
  decline() {
    this.dispatchEvent(new ConfirmationDeclinedEvent({}));
    this.close();
  }
  close() {
    this.open = false;
  }
  render() {
    return html`
      <div class=${classMap(this.classes)} part="container">
        <pop-up
          ?open=${this.open}
          closeButton
          closeOnOutsideClick
          closeOnEsc
          @pop-up-closed=${this.decline}
        >
          <div class="message" part="message">${this.message}</div>
          <div class="buttons" part="buttons">
            <ss-button positive @click=${this.accept} part="accept-button"
              >${this.acceptText}</ss-button
            >
            <ss-button negative @click=${this.decline} part="decline-button"
              >${this.declineText}</ss-button
            >
          </div>
        </pop-up>
      </div>
    `;
  }
}, _a3 = ConfirmationModalProp.OPEN, _b2 = ConfirmationModalProp.MESSAGE, _c2 = ConfirmationModalProp.ACCEPT_TEXT, _d2 = ConfirmationModalProp.DECLINE_TEXT, _a4.styles = [
  theme,
  css`
      :host {
        display: block;
      }

      .confirmation-modal {
        display: none;
        position: fixed;
        width: 50vw;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: 1px solid #666;

        z-index: 1000;
        border-radius: 0.5rem;
        box-shadow: 0 0 5rem rgba(0, 0, 0, 0.75);

        &.open {
          display: block;
        }

        .message {
          padding: 1rem;
        }

        .buttons {
          display: flex;
          justify-content: flex-end;
          gap: 0.5rem;
          padding: 0.5rem;
        }
      }
    `
], _a4);
__decorate2([
  property({ type: Boolean, reflect: true })
], ConfirmationModal.prototype, _a3, void 0);
__decorate2([
  property()
], ConfirmationModal.prototype, _b2, void 0);
__decorate2([
  property()
], ConfirmationModal.prototype, _c2, void 0);
__decorate2([
  property()
], ConfirmationModal.prototype, _d2, void 0);
__decorate2([
  state()
], ConfirmationModal.prototype, "newlyOpened", void 0);
__decorate2([
  state()
], ConfirmationModal.prototype, "classes", null);
ConfirmationModal = __decorate2([
  customElement("confirmation-modal")
], ConfirmationModal);
export {
  ConfirmationModal
};
//# sourceMappingURL=@ss_ui_components_confirmation-modal.js.map
