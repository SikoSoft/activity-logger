import {
  ifDefined
} from "./chunk-2PYGIOL7.js";
import {
  repeat
} from "./chunk-HF2IGRDM.js";
import {
  theme
} from "./chunk-3IYY47KY.js";
import {
  customElement,
  property,
  query,
  state
} from "./chunk-UZUV3VNE.js";
import {
  LitElement
} from "./chunk-M5Y2UPGE.js";
import {
  css
} from "./chunk-SBXOPBOA.js";
import {
  html,
  nothing
} from "./chunk-32RPEPIA.js";

// node_modules/@ss/ui/dist/models/Input.js
var InputType;
(function(InputType2) {
  InputType2["TEXT"] = "text";
  InputType2["DATE"] = "date";
  InputType2["DATETIME_LOCAL"] = "datetime-local";
  InputType2["PASSWORD"] = "password";
  InputType2["NUMBER"] = "number";
})(InputType || (InputType = {}));

// node_modules/@ss/ui/dist/components/ss-input/ss-input.models.js
var SSInputProp;
(function(SSInputProp2) {
  SSInputProp2["TYPE"] = "type";
  SSInputProp2["VALUE"] = "value";
  SSInputProp2["AUTO_COMPLETE"] = "autoComplete";
  SSInputProp2["PLACEHOLDER"] = "placeholder";
  SSInputProp2["SUGGESTIONS"] = "suggestions";
  SSInputProp2["MIN"] = "min";
  SSInputProp2["MAX"] = "max";
  SSInputProp2["STEP"] = "step";
})(SSInputProp || (SSInputProp = {}));
var ssInputProps = {
  [SSInputProp.TYPE]: {
    default: InputType.TEXT,
    description: "What form element type the input behaves as",
    control: "text"
  },
  [SSInputProp.VALUE]: {
    default: "",
    description: "The value as set from the data model",
    control: "text"
  },
  [SSInputProp.AUTO_COMPLETE]: {
    default: false,
    description: "Should the field provide auto-completion suggestions",
    control: "boolean"
  },
  [SSInputProp.PLACEHOLDER]: {
    default: "",
    description: "Text to display in the field when no value is present",
    control: "text"
  },
  [SSInputProp.SUGGESTIONS]: {
    default: [],
    description: "An array of suggestions used for auto-completion",
    control: "text"
  },
  [SSInputProp.MIN]: {
    default: 0,
    description: "The minimum value for a number input",
    control: "number"
  },
  [SSInputProp.MAX]: {
    default: 100,
    description: "The maximum value for a number input",
    control: "number"
  },
  [SSInputProp.STEP]: {
    default: 1,
    description: "The step value for a number input",
    control: "number"
  }
};

// node_modules/@ss/ui/dist/components/ss-input/ss-input.events.js
var inputChangedEventName = "input-changed";
var InputChangedEvent = class extends CustomEvent {
  constructor(payload) {
    super(inputChangedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};
var inputSubmittedEventName = "input-submitted";
var InputSubmittedEvent = class extends CustomEvent {
  constructor(payload) {
    super(inputSubmittedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};

// node_modules/@ss/ui/dist/components/ss-input-auto/ss-input-auto.events.js
var suggestionChangedEventName = "suggestion-changed";
var SuggestionChangedEvent = class extends CustomEvent {
  constructor(payload) {
    super(suggestionChangedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};
var suggestionSubmittedEventName = "suggestion-submitted";
var SuggestionSubmittedEvent = class extends CustomEvent {
  constructor(payload) {
    super(suggestionSubmittedEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};

// node_modules/@ss/ui/dist/components/ss-input-auto/ss-input-auto.models.js
var SSInputAutoProp;
(function(SSInputAutoProp2) {
  SSInputAutoProp2["INPUT"] = "input";
  SSInputAutoProp2["MAX_MATCHES"] = "maxMatches";
  SSInputAutoProp2["MIN_INPUT"] = "minInput";
  SSInputAutoProp2["SUGGESTIONS"] = "suggestions";
})(SSInputAutoProp || (SSInputAutoProp = {}));
var ssInputAutoProps = {
  [SSInputAutoProp.INPUT]: {
    default: "",
    control: "text",
    description: "The input value"
  },
  [SSInputAutoProp.MAX_MATCHES]: {
    default: 5,
    control: "number",
    description: "The maximum number of suggestions to display"
  },
  [SSInputAutoProp.MIN_INPUT]: {
    default: 1,
    control: "number",
    description: "The minimum number of characters to start showing suggestions"
  },
  [SSInputAutoProp.SUGGESTIONS]: {
    default: [],
    control: "text",
    description: "The list of suggestions to display"
  }
};

// node_modules/@ss/ui/dist/components/ss-input-auto/ss-input-auto.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
var _b;
var _c;
var _d;
var _a2;
var SSInputAuto = (_a2 = class extends LitElement {
  constructor() {
    super(...arguments);
    this[_a] = ssInputAutoProps[SSInputAutoProp.INPUT].default;
    this[_b] = ssInputAutoProps[SSInputAutoProp.MIN_INPUT].default;
    this[_c] = ssInputAutoProps[SSInputAutoProp.MAX_MATCHES].default;
    this[_d] = ssInputAutoProps[SSInputAutoProp.SUGGESTIONS].default;
    this.selectedIndex = -1;
  }
  get show() {
    return this.suggestions.length > 0 && this.input.length >= this.minInput;
  }
  get maxSelectedIndex() {
    return this.suggestions.length - 1;
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("select-up", () => {
      this.adjustSelectedIndex(-1);
    });
    this.addEventListener("select-down", () => {
      this.adjustSelectedIndex(1);
    });
    this.addEventListener("select", () => {
      if (this.suggestions.length && this.selectedIndex !== -1) {
        this.sendSelectedEvent(this.suggestions[this.selectedIndex]);
      } else {
        this.sendSubmitEvent();
      }
    });
  }
  adjustSelectedIndex(adjustment) {
    let newIndex = this.selectedIndex + adjustment;
    if (newIndex < -1) {
      newIndex = this.maxSelectedIndex;
    }
    if (newIndex > this.maxSelectedIndex) {
      newIndex = -1;
    }
    this.selectedIndex = newIndex;
  }
  sendSelectedEvent(suggestion) {
    this.dispatchEvent(new SuggestionChangedEvent({ value: suggestion }));
  }
  sendSubmitEvent() {
    this.dispatchEvent(new SuggestionSubmittedEvent({ selectedIndex: this.selectedIndex }));
  }
  render() {
    return html`
      <div>
        ${this.show ? html` <ul class="box">
              ${repeat(this.suggestions, (suggestion) => suggestion, (suggestion, index) => html`
                  <li
                    class=${index === this.selectedIndex ? "selected" : ""}
                    @mouseover=${() => this.selectedIndex = index}
                    @click=${() => this.sendSelectedEvent(suggestion)}
                  >
                    ${suggestion}
                  </li>
                `)}
            </ul>` : nothing}
      </div>
    `;
  }
}, _a = SSInputAutoProp.INPUT, _b = SSInputAutoProp.MIN_INPUT, _c = SSInputAutoProp.MAX_MATCHES, _d = SSInputAutoProp.SUGGESTIONS, _a2.styles = [
  theme,
  css`
      div {
        position: relative;
      }

      ul {
        z-index: 100;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        list-style: none;
        padding: 0;
        margin: 0;
        box-sizing: border-box;
        overflow: hidden;
      }

      li {
        padding: 0.5rem;
        background-color: #fff;
        transition: all 0.2s;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        height: 2rem;
        line-height: 2rem;
        color: #888;
        text-align: left;
      }

      li.selected {
        color: #000;
        background-color: #ddd;
      }
    `
], _a2);
__decorate([
  property()
], SSInputAuto.prototype, _a, void 0);
__decorate([
  property({ type: Number })
], SSInputAuto.prototype, _b, void 0);
__decorate([
  property({ type: Number })
], SSInputAuto.prototype, _c, void 0);
__decorate([
  property({ type: Array })
], SSInputAuto.prototype, _d, void 0);
__decorate([
  state()
], SSInputAuto.prototype, "selectedIndex", void 0);
__decorate([
  state()
], SSInputAuto.prototype, "show", null);
SSInputAuto = __decorate([
  customElement("ss-input-auto")
], SSInputAuto);

// node_modules/@ss/ui/dist/components/ss-input/ss-input.js
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a3;
var _b2;
var _c2;
var _d2;
var _e;
var _f;
var _g;
var _h;
var _a4;
var SSInput = (_a4 = class extends LitElement {
  constructor() {
    super(...arguments);
    this.clickFocusHandler = (event) => {
    };
    this[_a3] = ssInputProps[SSInputProp.TYPE].default;
    this[_b2] = ssInputProps[SSInputProp.VALUE].default;
    this[_c2] = ssInputProps[SSInputProp.AUTO_COMPLETE].default;
    this[_d2] = ssInputProps[SSInputProp.PLACEHOLDER].default;
    this[_e] = ssInputProps[SSInputProp.SUGGESTIONS].default;
    this._value = this.value;
    this.hasFocus = false;
    this.autoDismissed = false;
    this.handleChange = (e) => {
      let value = "";
      if (e.target instanceof HTMLInputElement) {
        value = e.target.value;
      }
      this._value = value;
      if (e.target instanceof HTMLInputElement) {
        e.target.value = this._value;
      }
      e.preventDefault();
      return false;
    };
    this.handleKeyDown = (e) => {
      if (!(e.target instanceof HTMLInputElement)) {
        return;
      }
      switch (e.code) {
        case "Tab":
          this.autoDismissed = true;
          return;
        case "ArrowUp":
          this.sendSuggestionUpEvent(e);
          return;
        case "ArrowDown":
          this.sendSuggestionDownEvent(e);
          return;
        case "Enter":
          if (this.showAutoComplete) {
            this.sendSuggestionSelectEvent();
          } else {
            this.sendSubmittedEvent();
          }
          e.preventDefault();
          return;
      }
    };
    this.handleInput = (e) => {
      let value = "";
      if (e.target instanceof HTMLInputElement) {
        value = e.target.value;
      }
      this.dispatchEvent(new InputChangedEvent({
        value
      }));
      this._value = value;
      this.autoDismissed = false;
      return true;
    };
    this.handleFocus = (e) => {
      this.hasFocus = true;
      this.autoDismissed = false;
    };
    this.handleBlur = (e) => {
      setTimeout(() => {
        this.hasFocus = false;
      }, 200);
    };
    this.suggestionSelectHandler = (e) => {
      this.autoDismissed = true;
      this.inputField.value = e.detail.value;
      this.inputField.dispatchEvent(new InputChangedEvent({ value: e.detail.value }));
    };
  }
  get showAutoComplete() {
    return this.autoComplete && !this.autoDismissed && this.value.length > 0;
  }
  connectedCallback() {
    super.connectedCallback();
    this.clickFocusHandler = (event) => {
      const withinBoundaries = event.composedPath().includes(this.container);
      if (!withinBoundaries) {
        this.autoDismissed = true;
      }
      if (this.type === InputType.NUMBER) {
        this.min = ssInputProps[SSInputProp.MIN].default;
        this.max = ssInputProps[SSInputProp.MAX].default;
        this.step = ssInputProps[SSInputProp.STEP].default;
      }
    };
    window.addEventListener("mousedown", this.clickFocusHandler);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    window.removeEventListener("mousedown", this.clickFocusHandler);
  }
  updated(changedProperties) {
    super.updated(changedProperties);
    if (changedProperties.has("value")) {
      this.inputField.value = this.value;
    }
  }
  focus() {
    this.inputField.focus();
  }
  clear() {
    this.inputField.value = "";
    this.dispatchEvent(new InputChangedEvent({
      value: ""
    }));
  }
  sendSuggestionUpEvent(e) {
    if (!this.autoCompleteNode) {
      return;
    }
    this.autoCompleteNode.dispatchEvent(new CustomEvent("select-up"));
    e.preventDefault();
  }
  sendSuggestionDownEvent(e) {
    if (!this.autoCompleteNode) {
      return;
    }
    this.autoCompleteNode.dispatchEvent(new CustomEvent("select-down"));
    e.preventDefault();
  }
  sendSuggestionSelectEvent() {
    if (!this.autoCompleteNode) {
      return;
    }
    this.autoCompleteNode.dispatchEvent(new CustomEvent("select"));
  }
  sendSubmittedEvent() {
    this.inputField.dispatchEvent(new InputSubmittedEvent({ value: this._value }));
  }
  handleSubmit() {
    this.sendSubmittedEvent();
  }
  render() {
    return html`
      <span part="container">
        <input
          part="input"
          type=${this.type}
          value=${this.value}
          @change=${this.handleChange}
          @keydown=${this.handleKeyDown}
          @input=${this.handleInput}
          @focus=${this.handleFocus}
          @blur=${this.handleBlur}
          placeholder=${this.placeholder}
          min=${ifDefined(this.min)}
          max=${ifDefined(this.max)}
          step=${ifDefined(this.step)}
          autocomplete="off"
          autocapitalize="off"
        />
        ${this.showAutoComplete ? html`
              <ss-input-auto
                input=${this._value}
                .suggestions=${this.suggestions}
                @suggestion-submitted=${this.handleSubmit}
                @suggestion-changed=${this.suggestionSelectHandler}
              ></ss-input-auto>
            ` : nothing}
      </span>
    `;
  }
}, _a3 = SSInputProp.TYPE, _b2 = SSInputProp.VALUE, _c2 = SSInputProp.AUTO_COMPLETE, _d2 = SSInputProp.PLACEHOLDER, _e = SSInputProp.SUGGESTIONS, _f = SSInputProp.MIN, _g = SSInputProp.MAX, _h = SSInputProp.STEP, _a4.styles = [
  theme,
  css`
      input:focus {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
      }
    `
], _a4);
__decorate2([
  property()
], SSInput.prototype, _a3, void 0);
__decorate2([
  property()
], SSInput.prototype, _b2, void 0);
__decorate2([
  property({ type: Boolean })
], SSInput.prototype, _c2, void 0);
__decorate2([
  property()
], SSInput.prototype, _d2, void 0);
__decorate2([
  property({ type: Array })
], SSInput.prototype, _e, void 0);
__decorate2([
  property({ type: Number, reflect: true })
], SSInput.prototype, _f, void 0);
__decorate2([
  property({ type: Number, reflect: true })
], SSInput.prototype, _g, void 0);
__decorate2([
  property({ type: Number, reflect: true })
], SSInput.prototype, _h, void 0);
__decorate2([
  state()
], SSInput.prototype, "_value", void 0);
__decorate2([
  query("input")
], SSInput.prototype, "inputField", void 0);
__decorate2([
  query("ss-input-auto")
], SSInput.prototype, "autoCompleteNode", void 0);
__decorate2([
  query("span")
], SSInput.prototype, "container", void 0);
__decorate2([
  state()
], SSInput.prototype, "hasFocus", void 0);
__decorate2([
  state()
], SSInput.prototype, "autoDismissed", void 0);
__decorate2([
  state()
], SSInput.prototype, "showAutoComplete", null);
SSInput = __decorate2([
  customElement("ss-input")
], SSInput);

export {
  SSInput
};
//# sourceMappingURL=chunk-XOSH2YAQ.js.map
