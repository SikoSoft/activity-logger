import {
  classMap
} from "./chunk-NRWESX2P.js";
import {
  theme
} from "./chunk-3IYY47KY.js";
import {
  customElement,
  property,
  state
} from "./chunk-UZUV3VNE.js";
import "./chunk-RMSEGTBR.js";
import {
  LitElement
} from "./chunk-M5Y2UPGE.js";
import {
  css
} from "./chunk-SBXOPBOA.js";
import {
  html
} from "./chunk-32RPEPIA.js";

// node_modules/@ss/ui/dist/components/ss-collapsable/ss-collapsable.models.js
var SSCollapsableProp;
(function(SSCollapsableProp2) {
  SSCollapsableProp2["TITLE"] = "title";
  SSCollapsableProp2["OPEN"] = "open";
  SSCollapsableProp2["PANEL_ID"] = "panelId";
})(SSCollapsableProp || (SSCollapsableProp = {}));
var ssCollapsableProps = {
  [SSCollapsableProp.TITLE]: {
    default: "",
    description: "The heading in which is always displayed",
    control: "text"
  },
  [SSCollapsableProp.OPEN]: {
    default: false,
    description: "Whether the content is in opened state",
    control: "boolean"
  },
  [SSCollapsableProp.PANEL_ID]: {
    default: "",
    description: "The unique identifier for the panel",
    control: "text"
  }
};

// node_modules/@ss/ui/dist/components/ss-collapsable/ss-collapsable.events.js
var collapsableToggledEventName = "collapsable-toggled";
var CollapsableToggledEvent = class extends CustomEvent {
  constructor(payload) {
    super(collapsableToggledEventName, {
      bubbles: true,
      composed: true,
      detail: payload
    });
  }
};

// node_modules/@ss/ui/dist/components/ss-collapsable/ss-collapsable.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
var _b;
var _c;
var _a2;
var SSCollapsable = (_a2 = class extends LitElement {
  constructor() {
    super(...arguments);
    this[_a] = ssCollapsableProps[SSCollapsableProp.TITLE].default;
    this[_b] = ssCollapsableProps[SSCollapsableProp.OPEN].default;
    this[_c] = ssCollapsableProps[SSCollapsableProp.PANEL_ID].default;
  }
  firstUpdated(changedProperties) {
    super.firstUpdated(changedProperties);
    if (this.panelId === "") {
      this.panelId = this.title;
    }
  }
  get classes() {
    return { box: true, collapsable: true, open: this.open };
  }
  handleIconClick() {
    this.toggle();
  }
  toggle() {
    this.open = !this.open;
    this.dispatchEvent(new CustomEvent("toggled", {
      bubbles: true,
      composed: true,
      detail: this.open
    }));
    this.dispatchEvent(new CollapsableToggledEvent({ panelId: this.panelId, isOpen: this.open }));
  }
  render() {
    return html`
      <div class=${classMap(this.classes)}>
        <div class="head">
          <div class="title">${this.title}</div>
          <div class="icon">
            <button @click=${() => this.handleIconClick()}>
              ${this.open ? "-" : "+"}
            </button>
          </div>
        </div>
        <div class="body">
          <slot></slot>
        </div>
      </div>
    `;
  }
}, _a = SSCollapsableProp.TITLE, _b = SSCollapsableProp.OPEN, _c = SSCollapsableProp.PANEL_ID, _a2.styles = [
  theme,
  css`
      .collapsable {
        padding: 1rem;
      }

      .head {
        display: flex;
      }

      .title {
        flex-grow: 9;
      }

      .icon {
        flex-grow: 1;
        text-align: right;
      }

      .icon button {
        width: auto;
        padding: 0 0.5rem;
      }

      .body {
        display: none;
        transition: all 0.3s;
        overflow: hidden;
      }

      .collapsable.open .body {
        display: block;
        padding-top: 1rem;
      }
    `
], _a2);
__decorate([
  property()
], SSCollapsable.prototype, _a, void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], SSCollapsable.prototype, _b, void 0);
__decorate([
  property({ type: String, reflect: true })
], SSCollapsable.prototype, _c, void 0);
__decorate([
  state()
], SSCollapsable.prototype, "classes", null);
SSCollapsable = __decorate([
  customElement("ss-collapsable")
], SSCollapsable);
export {
  SSCollapsable
};
//# sourceMappingURL=@ss_ui_components_ss-collapsable.js.map
