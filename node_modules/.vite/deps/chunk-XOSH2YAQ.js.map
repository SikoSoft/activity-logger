{
  "version": 3,
  "sources": ["../../@ss/ui/src/models/Input.ts", "../../@ss/ui/src/components/ss-input/ss-input.models.ts", "../../@ss/ui/src/components/ss-input/ss-input.events.ts", "../../@ss/ui/src/components/ss-input-auto/ss-input-auto.events.ts", "../../@ss/ui/src/components/ss-input-auto/ss-input-auto.models.ts", "../../@ss/ui/src/components/ss-input-auto/ss-input-auto.ts", "../../@ss/ui/src/components/ss-input/ss-input.ts"],
  "sourcesContent": ["export enum InputType {\n  TEXT = 'text',\n  DATE = 'date',\n  DATETIME_LOCAL = 'datetime-local',\n  PASSWORD = 'password',\n  NUMBER = 'number',\n}\n", "import { PropConfigMap, PropTypes } from '../../models/Prop';\nimport { InputType } from '../../models/Input';\n\nexport enum SSInputProp {\n  TYPE = 'type',\n  VALUE = 'value',\n  AUTO_COMPLETE = 'autoComplete',\n  PLACEHOLDER = 'placeholder',\n  SUGGESTIONS = 'suggestions',\n  MIN = 'min',\n  MAX = 'max',\n  STEP = 'step',\n}\n\nexport interface SSInputProps extends PropTypes {\n  [SSInputProp.TYPE]: InputType;\n  [SSInputProp.VALUE]: string;\n  [SSInputProp.AUTO_COMPLETE]: boolean;\n  [SSInputProp.PLACEHOLDER]: string;\n  [SSInputProp.SUGGESTIONS]: string[];\n  [SSInputProp.MIN]: number;\n  [SSInputProp.MAX]: number;\n  [SSInputProp.STEP]: number;\n}\n\nexport const ssInputProps: PropConfigMap<SSInputProps> = {\n  [SSInputProp.TYPE]: {\n    default: InputType.TEXT,\n    description: 'What form element type the input behaves as',\n    control: 'text',\n  },\n  [SSInputProp.VALUE]: {\n    default: '',\n    description: 'The value as set from the data model',\n    control: 'text',\n  },\n  [SSInputProp.AUTO_COMPLETE]: {\n    default: false,\n    description: 'Should the field provide auto-completion suggestions',\n    control: 'boolean',\n  },\n  [SSInputProp.PLACEHOLDER]: {\n    default: '',\n    description: 'Text to display in the field when no value is present',\n    control: 'text',\n  },\n  [SSInputProp.SUGGESTIONS]: {\n    default: [],\n    description: 'An array of suggestions used for auto-completion',\n    control: 'text',\n  },\n  [SSInputProp.MIN]: {\n    default: 0,\n    description: 'The minimum value for a number input',\n    control: 'number',\n  },\n  [SSInputProp.MAX]: {\n    default: 100,\n    description: 'The maximum value for a number input',\n    control: 'number',\n  },\n  [SSInputProp.STEP]: {\n    default: 1,\n    description: 'The step value for a number input',\n    control: 'number',\n  },\n};\n", "export const inputChangedEventName = 'input-changed';\n\nexport interface InputChangedEventPayload {\n  value: string;\n}\n\nexport class InputChangedEvent extends CustomEvent<InputChangedEventPayload> {\n  constructor(payload: InputChangedEventPayload) {\n    super(inputChangedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n\nexport const inputSubmittedEventName = 'input-submitted';\n\nexport interface InputSubmittedEventPayload {\n  value: string;\n}\n\nexport class InputSubmittedEvent extends CustomEvent<InputSubmittedEventPayload> {\n  constructor(payload: InputSubmittedEventPayload) {\n    super(inputSubmittedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n", "export const suggestionChangedEventName = 'suggestion-changed';\n\nexport interface SuggestionChangedEventPayload {\n  value: string;\n}\n\nexport class SuggestionChangedEvent extends CustomEvent<SuggestionChangedEventPayload> {\n  constructor(payload: SuggestionChangedEventPayload) {\n    super(suggestionChangedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n\nexport const suggestionSubmittedEventName = 'suggestion-submitted';\n\nexport interface SuggestionSubmittedEventPayload {\n  selectedIndex: number;\n}\n\nexport class SuggestionSubmittedEvent extends CustomEvent<SuggestionSubmittedEventPayload> {\n  constructor(payload: SuggestionSubmittedEventPayload) {\n    super(suggestionSubmittedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n", "import { PropConfigMap, PropTypes } from '../../models/Prop';\n\nexport enum SSInputAutoProp {\n  INPUT = 'input',\n  MAX_MATCHES = 'maxMatches',\n  MIN_INPUT = 'minInput',\n  SUGGESTIONS = 'suggestions',\n}\n\nexport interface SSInputAutoProps extends PropTypes {\n  [SSInputAutoProp.INPUT]: string;\n  [SSInputAutoProp.MAX_MATCHES]: number;\n  [SSInputAutoProp.MIN_INPUT]: number;\n  [SSInputAutoProp.SUGGESTIONS]: string[];\n}\n\nexport const ssInputAutoProps: PropConfigMap<SSInputAutoProps> = {\n  [SSInputAutoProp.INPUT]: {\n    default: '',\n    control: 'text',\n    description: 'The input value',\n  },\n  [SSInputAutoProp.MAX_MATCHES]: {\n    default: 5,\n    control: 'number',\n    description: 'The maximum number of suggestions to display',\n  },\n  [SSInputAutoProp.MIN_INPUT]: {\n    default: 1,\n    control: 'number',\n    description:\n      'The minimum number of characters to start showing suggestions',\n  },\n  [SSInputAutoProp.SUGGESTIONS]: {\n    default: [],\n    control: 'text',\n    description: 'The list of suggestions to display',\n  },\n};\n", "import { html, css, nothing, LitElement } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\n\nimport {\n  SuggestionChangedEvent,\n  SuggestionSubmittedEvent,\n} from './ss-input-auto.events';\n\nimport { theme } from '../../styles/theme';\nimport {\n  SSInputAutoProp,\n  SSInputAutoProps,\n  ssInputAutoProps,\n} from './ss-input-auto.models';\n\n@customElement('ss-input-auto')\nexport class SSInputAuto extends LitElement {\n  static styles = [\n    theme,\n    css`\n      div {\n        position: relative;\n      }\n\n      ul {\n        z-index: 100;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n        overflow: hidden;\n      }\n\n      li {\n        padding: 0.5rem;\n        background-color: #fff;\n        transition: all 0.2s;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        height: 2rem;\n        line-height: 2rem;\n        color: #888;\n        text-align: left;\n      }\n\n      li.selected {\n        color: #000;\n        background-color: #ddd;\n      }\n    `,\n  ];\n\n  @property()\n  [SSInputAutoProp.INPUT]: SSInputAutoProps[SSInputAutoProp.INPUT] =\n    ssInputAutoProps[SSInputAutoProp.INPUT].default;\n\n  @property({ type: Number })\n  [SSInputAutoProp.MIN_INPUT]: SSInputAutoProps[SSInputAutoProp.MIN_INPUT] =\n    ssInputAutoProps[SSInputAutoProp.MIN_INPUT].default;\n\n  @property({ type: Number })\n  [SSInputAutoProp.MAX_MATCHES]: SSInputAutoProps[SSInputAutoProp.MAX_MATCHES] =\n    ssInputAutoProps[SSInputAutoProp.MAX_MATCHES].default;\n\n  @property({ type: Array })\n  [SSInputAutoProp.SUGGESTIONS]: SSInputAutoProps[SSInputAutoProp.SUGGESTIONS] =\n    ssInputAutoProps[SSInputAutoProp.SUGGESTIONS].default;\n\n  @state() selectedIndex: number = -1;\n\n  @state()\n  get show(): boolean {\n    return this.suggestions.length > 0 && this.input.length >= this.minInput;\n  }\n\n  get maxSelectedIndex(): number {\n    return this.suggestions.length - 1;\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    this.addEventListener('select-up', () => {\n      this.adjustSelectedIndex(-1);\n    });\n\n    this.addEventListener('select-down', () => {\n      this.adjustSelectedIndex(1);\n    });\n\n    this.addEventListener('select', () => {\n      if (this.suggestions.length && this.selectedIndex !== -1) {\n        this.sendSelectedEvent(this.suggestions[this.selectedIndex]);\n      } else {\n        this.sendSubmitEvent();\n      }\n    });\n  }\n\n  private adjustSelectedIndex(adjustment: number): void {\n    let newIndex = this.selectedIndex + adjustment;\n    if (newIndex < -1) {\n      newIndex = this.maxSelectedIndex;\n    }\n    if (newIndex > this.maxSelectedIndex) {\n      newIndex = -1;\n    }\n    this.selectedIndex = newIndex;\n  }\n\n  private sendSelectedEvent(suggestion: string) {\n    this.dispatchEvent(new SuggestionChangedEvent({ value: suggestion }));\n  }\n\n  private sendSubmitEvent() {\n    this.dispatchEvent(\n      new SuggestionSubmittedEvent({ selectedIndex: this.selectedIndex }),\n    );\n  }\n\n  render() {\n    return html`\n      <div>\n        ${this.show\n          ? html` <ul class=\"box\">\n              ${repeat(\n                this.suggestions,\n                suggestion => suggestion,\n                (suggestion, index) => html`\n                  <li\n                    class=${index === this.selectedIndex ? 'selected' : ''}\n                    @mouseover=${() => (this.selectedIndex = index)}\n                    @click=${() => this.sendSelectedEvent(suggestion)}\n                  >\n                    ${suggestion}\n                  </li>\n                `,\n              )}\n            </ul>`\n          : nothing}\n      </div>\n    `;\n  }\n}\n", "import { LitElement, html, PropertyValueMap, nothing, css } from 'lit';\nimport { property, customElement, state, query } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { InputType } from '../../models/Input';\nimport { SSInputProp, SSInputProps, ssInputProps } from './ss-input.models';\n\nimport { InputChangedEvent, InputSubmittedEvent } from './ss-input.events';\nimport { SuggestionChangedEvent } from '../ss-input-auto/ss-input-auto.events';\n\nimport '../ss-input-auto/ss-input-auto';\n\nimport { theme } from '../../styles/theme';\n\n@customElement('ss-input')\nexport class SSInput extends LitElement {\n  private clickFocusHandler: (event: MouseEvent) => void = (\n    event: MouseEvent,\n  ) => {};\n\n  static styles = [\n    theme,\n    css`\n      input:focus {\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n      }\n    `,\n  ];\n\n  @property()\n  [SSInputProp.TYPE]: SSInputProps[SSInputProp.TYPE] =\n    ssInputProps[SSInputProp.TYPE].default;\n\n  @property()\n  [SSInputProp.VALUE]: SSInputProps[SSInputProp.VALUE] =\n    ssInputProps[SSInputProp.VALUE].default;\n\n  @property({ type: Boolean })\n  [SSInputProp.AUTO_COMPLETE]: SSInputProps[SSInputProp.AUTO_COMPLETE] =\n    ssInputProps[SSInputProp.AUTO_COMPLETE].default;\n\n  @property()\n  [SSInputProp.PLACEHOLDER]: SSInputProps[SSInputProp.PLACEHOLDER] =\n    ssInputProps[SSInputProp.PLACEHOLDER].default;\n\n  @property({ type: Array })\n  [SSInputProp.SUGGESTIONS]: SSInputProps[SSInputProp.SUGGESTIONS] =\n    ssInputProps[SSInputProp.SUGGESTIONS].default;\n\n  @property({ type: Number, reflect: true })\n  [SSInputProp.MIN]?: SSInputProps[SSInputProp.MIN];\n\n  @property({ type: Number, reflect: true })\n  [SSInputProp.MAX]?: SSInputProps[SSInputProp.MAX];\n\n  @property({ type: Number, reflect: true })\n  [SSInputProp.STEP]?: SSInputProps[SSInputProp.STEP];\n\n  @state() _value: string = this.value;\n  @query('input') inputField!: HTMLInputElement;\n  @query('ss-input-auto') autoCompleteNode: HTMLElement | undefined;\n  @query('span') container!: HTMLSpanElement;\n\n  @state() hasFocus: boolean = false;\n  @state() autoDismissed: boolean = false;\n  @state()\n  get showAutoComplete(): boolean {\n    return this.autoComplete && !this.autoDismissed && this.value.length > 0;\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    this.clickFocusHandler = (event: MouseEvent) => {\n      const withinBoundaries = event.composedPath().includes(this.container);\n      if (!withinBoundaries) {\n        this.autoDismissed = true;\n      }\n\n      if (this.type === InputType.NUMBER) {\n        this.min = ssInputProps[SSInputProp.MIN].default;\n        this.max = ssInputProps[SSInputProp.MAX].default;\n        this.step = ssInputProps[SSInputProp.STEP].default;\n      }\n    };\n\n    window.addEventListener('mousedown', this.clickFocusHandler);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n\n    window.removeEventListener('mousedown', this.clickFocusHandler);\n  }\n\n  updated(\n    changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>,\n  ) {\n    super.updated(changedProperties);\n    if (changedProperties.has('value')) {\n      this.inputField.value = this.value;\n    }\n  }\n\n  focus() {\n    this.inputField.focus();\n  }\n\n  clear() {\n    this.inputField.value = '';\n    this.dispatchEvent(\n      new InputChangedEvent({\n        value: '',\n      }),\n    );\n  }\n\n  private handleChange = (e: Event): boolean => {\n    let value = '';\n    if (e.target instanceof HTMLInputElement) {\n      value = e.target.value;\n    }\n    this._value = value;\n    if (e.target instanceof HTMLInputElement) {\n      e.target.value = this._value;\n    }\n    e.preventDefault();\n    return false;\n  };\n\n  private handleKeyDown = (e: KeyboardEvent): void => {\n    if (!(e.target instanceof HTMLInputElement)) {\n      return;\n    }\n    switch (e.code) {\n      case 'Tab':\n        this.autoDismissed = true;\n        return;\n      case 'ArrowUp':\n        this.sendSuggestionUpEvent(e);\n        return;\n      case 'ArrowDown':\n        this.sendSuggestionDownEvent(e);\n        return;\n      case 'Enter':\n        if (this.showAutoComplete) {\n          this.sendSuggestionSelectEvent();\n        } else {\n          this.sendSubmittedEvent();\n        }\n        e.preventDefault();\n        return;\n    }\n  };\n\n  private sendSuggestionUpEvent(e: KeyboardEvent) {\n    if (!this.autoCompleteNode) {\n      return;\n    }\n\n    this.autoCompleteNode.dispatchEvent(new CustomEvent('select-up'));\n    e.preventDefault();\n  }\n\n  private sendSuggestionDownEvent(e: KeyboardEvent) {\n    if (!this.autoCompleteNode) {\n      return;\n    }\n\n    this.autoCompleteNode.dispatchEvent(new CustomEvent('select-down'));\n    e.preventDefault();\n  }\n\n  private sendSuggestionSelectEvent() {\n    if (!this.autoCompleteNode) {\n      return;\n    }\n\n    this.autoCompleteNode.dispatchEvent(new CustomEvent('select'));\n  }\n\n  private sendSubmittedEvent() {\n    this.inputField.dispatchEvent(\n      new InputSubmittedEvent({ value: this._value }),\n    );\n  }\n\n  private handleSubmit() {\n    this.sendSubmittedEvent();\n  }\n\n  private handleInput = (e: Event): boolean => {\n    let value = '';\n    if (e.target instanceof HTMLInputElement) {\n      value = e.target.value;\n    }\n    this.dispatchEvent(\n      new InputChangedEvent({\n        value,\n      }),\n    );\n    this._value = value;\n    this.autoDismissed = false;\n    return true;\n  };\n\n  private handleFocus = (e: Event): void => {\n    this.hasFocus = true;\n    this.autoDismissed = false;\n  };\n\n  private handleBlur = (e: Event): void => {\n    setTimeout(() => {\n      this.hasFocus = false;\n    }, 200);\n  };\n\n  private suggestionSelectHandler = (e: SuggestionChangedEvent): void => {\n    this.autoDismissed = true;\n    this.inputField.value = e.detail.value;\n    this.inputField.dispatchEvent(\n      new InputChangedEvent({ value: e.detail.value }),\n    );\n  };\n\n  render() {\n    return html`\n      <span part=\"container\">\n        <input\n          part=\"input\"\n          type=${this.type}\n          value=${this.value}\n          @change=${this.handleChange}\n          @keydown=${this.handleKeyDown}\n          @input=${this.handleInput}\n          @focus=${this.handleFocus}\n          @blur=${this.handleBlur}\n          placeholder=${this.placeholder}\n          min=${ifDefined(this.min)}\n          max=${ifDefined(this.max)}\n          step=${ifDefined(this.step)}\n          autocomplete=\"off\"\n          autocapitalize=\"off\"\n        />\n        ${this.showAutoComplete\n          ? html`\n              <ss-input-auto\n                input=${this._value}\n                .suggestions=${this.suggestions}\n                @suggestion-submitted=${this.handleSubmit}\n                @suggestion-changed=${this.suggestionSelectHandler}\n              ></ss-input-auto>\n            `\n          : nothing}\n      </span>\n    `;\n  }\n}\n"],
  "mappings": "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",
  "names": ["InputType", "SSInputProp", "SSInputAutoProp", "_a", "_a", "_b", "_c", "_d", "__decorate"]
}
