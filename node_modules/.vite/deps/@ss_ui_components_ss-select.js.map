{
  "version": 3,
  "sources": ["../../@ss/ui/src/components/ss-select/ss-select.events.ts", "../../@ss/ui/src/components/ss-select/ss-select.models.ts", "../../@ss/ui/src/components/ss-select/ss-select.ts"],
  "sourcesContent": ["export const selectChangedEventName = 'select-changed';\n\nexport interface SelectChangedEventPayload<T> {\n  value: T;\n}\n\nexport class SelectChangedEvent<T> extends CustomEvent<\n  SelectChangedEventPayload<T>\n> {\n  constructor(payload: SelectChangedEventPayload<T>) {\n    super(selectChangedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n", "import { PropConfigMap, PropTypes } from '../../models/Prop';\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n}\n\nexport enum SSSelectProp {\n  OPTIONS = 'options',\n  SELECTED = 'selected',\n}\n\nexport interface SSSelectProps extends PropTypes {\n  [SSSelectProp.OPTIONS]: SelectOption[];\n  [SSSelectProp.SELECTED]: string;\n}\n\nexport const ssSelectProps: PropConfigMap<SSSelectProps> = {\n  [SSSelectProp.OPTIONS]: {\n    default: [],\n    description: 'The options to display in the select',\n    control: 'text',\n  },\n  [SSSelectProp.SELECTED]: {\n    default: '',\n    description: 'The value of the selected option',\n    control: 'text',\n  },\n};\n", "import { LitElement, html } from 'lit';\nimport { property, customElement, query } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\n\nimport { SelectChangedEvent } from './ss-select.events';\n\nimport { theme } from '../../styles/theme';\nimport { SSSelectProp, ssSelectProps, SSSelectProps } from './ss-select.models';\n\n@customElement('ss-select')\nexport class SSSelect extends LitElement {\n  static styles = [theme];\n\n  @property({ type: Array })\n  [SSSelectProp.OPTIONS]: SSSelectProps[SSSelectProp.OPTIONS] =\n    ssSelectProps[SSSelectProp.OPTIONS].default;\n\n  @property() [SSSelectProp.SELECTED]: SSSelectProps[SSSelectProp.SELECTED] =\n    ssSelectProps[SSSelectProp.SELECTED].default;\n\n  @query('select') selectNode!: HTMLSelectElement;\n\n  get value(): string {\n    return this.selectNode.value;\n  }\n\n  private handleSelectChanged() {\n    this.dispatchEvent(\n      new SelectChangedEvent({ value: this.selectNode.value }),\n    );\n  }\n\n  render() {\n    return html`\n      <select @change=${this.handleSelectChanged}>\n        ${repeat(\n          this.options,\n          option => option.value,\n          option => html`\n            <option\n              value=${option.value}\n              ?selected=${`${this.selected}` === `${option.value}`}\n            >\n              ${option.label}\n            </option>\n          `,\n        )}\n      </select>\n    `;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,yBAAyB;AAMhC,IAAO,qBAAP,cAAqC,YAE1C;EACC,YAAY,SAAqC;AAC/C,UAAM,wBAAwB;MAC5B,SAAS;MACT,UAAU;MACV,QAAQ;KACT;EACH;;;;ACRF,IAAY;CAAZ,SAAYA,eAAY;AACtB,EAAAA,cAAA,SAAA,IAAA;AACA,EAAAA,cAAA,UAAA,IAAA;AACF,GAHY,iBAAA,eAAY,CAAA,EAAA;AAUjB,IAAM,gBAA8C;EACzD,CAAC,aAAa,OAAO,GAAG;IACtB,SAAS,CAAA;IACT,aAAa;IACb,SAAS;;EAEX,CAAC,aAAa,QAAQ,GAAG;IACvB,SAAS;IACT,aAAa;IACb,SAAS;;;;;;;;;;;;;;AChBN,IAAM,YAANC,MAAA,cAAuB,WAAU;EAAjC,cAAA;;AAIL,SAAA,EAAA,IACE,cAAc,aAAa,OAAO,EAAE;AAE1B,SAAA,EAAA,IACV,cAAc,aAAa,QAAQ,EAAE;EAgCzC;EA5BE,IAAI,QAAK;AACP,WAAO,KAAK,WAAW;EACzB;EAEQ,sBAAmB;AACzB,SAAK,cACH,IAAI,mBAAmB,EAAE,OAAO,KAAK,WAAW,MAAK,CAAE,CAAC;EAE5D;EAEA,SAAM;AACJ,WAAO;wBACa,KAAK,mBAAmB;UACtC,OACA,KAAK,SACL,YAAU,OAAO,OACjB,YAAU;;sBAEE,OAAO,KAAK;0BACR,GAAG,KAAK,QAAQ,OAAO,GAAG,OAAO,KAAK,EAAE;;gBAElD,OAAO,KAAK;;WAEjB,CACF;;;EAGP;QAnCC,aAAa,SAAO,KAGR,aAAa,UANnBA,IAAA,SAAS,CAAC,KAAK,GADjBA;AAIL,WAAA;EADC,SAAS,EAAE,MAAM,MAAK,CAAE;;AAIb,WAAA;EAAX,SAAQ;;AAGQ,WAAA;EAAhB,MAAM,QAAQ;;AAVJ,WAAQ,WAAA;EADpB,cAAc,WAAW;GACb,QAAQ;",
  "names": ["SSSelectProp", "_a"]
}
