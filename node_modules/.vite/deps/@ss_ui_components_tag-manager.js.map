{
  "version": 3,
  "sources": ["../../@ss/ui/src/components/tag-manager/tag-manager.events.ts", "../../@ss/ui/src/components/tag-manager/tag-input/tag-input.models.ts", "../../@ss/ui/src/components/tag-manager/tag-input/tag-input.events.ts", "../../@ss/ui/src/components/tag-manager/tag-input/tag-input.ts", "../../@ss/ui/src/components/tag-manager/tag-list/tag-list.models.ts", "../../@ss/ui/src/components/tag-manager/tag-list/tag-list.events.ts", "../../@ss/ui/src/components/tag-manager/tag-list/tag-list.ts", "../../@ss/ui/src/components/tag-manager/tag-manager.models.ts", "../../@ss/ui/src/util/msg.ts", "../../@ss/ui/src/components/tag-manager/tag-manager.ts"],
  "sourcesContent": ["export const tagsUpdatedEventName = 'tags-updated';\n\nexport interface TagsUpdatedEventPayload {\n  tags: string[];\n}\n\nexport class TagsUpdatedEvent extends CustomEvent<TagsUpdatedEventPayload> {\n  constructor(payload: TagsUpdatedEventPayload) {\n    super(tagsUpdatedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n", "import { PropConfigMap, PropTypes } from '../../../models/Prop';\n\nexport enum TagInputProp {\n  VALUE = 'value',\n  ENABLE_SUGGESTIONS = 'enableSuggestions',\n}\n\nexport interface TagInputProps extends PropTypes {\n  [TagInputProp.VALUE]: string;\n  [TagInputProp.ENABLE_SUGGESTIONS]: boolean;\n}\n\nexport const tagInputProps: PropConfigMap<TagInputProps> = {\n  [TagInputProp.VALUE]: {\n    default: '',\n    control: 'text',\n    description: 'The input value',\n  },\n  [TagInputProp.ENABLE_SUGGESTIONS]: {\n    default: true,\n    control: 'boolean',\n    description: 'Enable tag suggestions',\n  },\n};\n", "export const tagInputUpdatedEventName = 'tag-input-updated';\n\nexport interface TagInputUpdatedEventPayload {\n  value: string;\n}\n\nexport class TagInputUpdatedEvent extends CustomEvent<TagInputUpdatedEventPayload> {\n  constructor(payload: TagInputUpdatedEventPayload) {\n    super(tagInputUpdatedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n\nexport const tagAddedEventName = 'tag-added';\n\nexport interface TagAddedEventPayload {\n  tag: string;\n}\n\nexport class TagAddedEvent extends CustomEvent<TagAddedEventPayload> {\n  constructor(payload: TagAddedEventPayload) {\n    super(tagAddedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n\nexport const tagSuggestionsUpdatedEventName = 'tag-suggestions-updated';\n\nexport interface TagSuggestionsUpdatedEventPayload {\n  suggestions: string[];\n}\n\nexport class TagSuggestionsUpdatedEvent extends CustomEvent<TagSuggestionsUpdatedEventPayload> {\n  constructor(payload: TagSuggestionsUpdatedEventPayload) {\n    super(tagSuggestionsUpdatedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n\nexport const tagSuggestionsRequestedEventName = 'tag-suggestions-requested';\n\nexport interface TagSuggestionsRequestedEventPayload {\n  value: string;\n}\n\nexport class TagSuggestionsRequestedEvent extends CustomEvent<TagSuggestionsRequestedEventPayload> {\n  constructor(payload: TagSuggestionsRequestedEventPayload) {\n    super(tagSuggestionsRequestedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n", "import { LitElement, css, html, nothing, PropertyValues } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\nimport '../../ss-input/ss-input';\nimport '../tag-input/tag-input';\n\nimport { theme } from '../../../styles/theme';\nimport { TagInputProp, tagInputProps, TagInputProps } from './tag-input.models';\nimport {\n  TagAddedEvent,\n  TagInputUpdatedEvent,\n  TagSuggestionsRequestedEvent,\n} from './tag-input.events';\n\n@customElement('tag-input')\nexport class TagInput extends LitElement {\n  private suggestionTimeout: ReturnType<typeof setTimeout> | null = null;\n\n  static styles = [\n    theme,\n    css`\n      #data-slot {\n        display: none;\n      }\n\n      .tag-input {\n        display: flex;\n      }\n\n      ss-input {\n        flex-grow: 7;\n      }\n\n      ss-button {\n        flex-grow: 3;\n      }\n    `,\n  ];\n\n  @property({ type: String, reflect: true })\n  [TagInputProp.VALUE]: TagInputProps[TagInputProp.VALUE] =\n    tagInputProps[TagInputProp.VALUE].default;\n\n  @state() suggestions: string[] = [];\n  @state() lastInputHadResults: boolean = true;\n  @state() lastInput: string = '';\n\n  get showButton(): boolean {\n    return this.value.length > 0;\n  }\n\n  async firstUpdated(_changedProperties: PropertyValues): Promise<void> {\n    super.firstUpdated(_changedProperties);\n    await this.updateComplete;\n\n    const slotNode = this.shadowRoot?.querySelector('slot');\n    if (slotNode) {\n      slotNode.addEventListener('slotchange', () => {\n        this.syncSlotItems();\n      });\n    }\n\n    this.syncSlotItems();\n  }\n\n  private syncSlotItems() {\n    this.suggestions = [];\n    this.querySelectorAll('data-item').forEach(item => {\n      this.suggestions.push(item.textContent || '');\n    });\n  }\n\n  private handleSubmitted() {\n    this.save();\n  }\n\n  private async handleChanged(e: CustomEvent) {\n    this.value = e.detail.value;\n\n    this.dispatchEvent(\n      new TagInputUpdatedEvent({\n        value: this.value,\n      }),\n    );\n\n    if (this.suggestionTimeout) {\n      clearTimeout(this.suggestionTimeout);\n    }\n    this.suggestionTimeout = setTimeout(() => {\n      this.requestSuggestions();\n    }, 200);\n  }\n\n  private async requestSuggestions() {\n    this.dispatchEvent(new TagSuggestionsRequestedEvent({ value: this.value }));\n  }\n\n  private handleSaveClick(e: CustomEvent) {\n    this.save();\n  }\n\n  private save() {\n    this.sendAddedEvent();\n    this.value = '';\n  }\n\n  private sendAddedEvent() {\n    this.dispatchEvent(\n      new TagAddedEvent({\n        tag: this.value,\n      }),\n    );\n  }\n\n  render() {\n    return html`\n      <div class=\"tag-input\">\n        <slot id=\"data-slot\"></slot>\n\n        <ss-input\n          @input-submitted=${this.handleSubmitted}\n          @input-changed=${this.handleChanged}\n          placeholder=\"Tag\"\n          value=${this.value}\n          .suggestions=${this.suggestions}\n          autoComplete\n        ></ss-input>\n\n        ${this.showButton\n          ? html`\n              <ss-button text=\"Add\" @click=${this.handleSaveClick}></ss-button>\n            `\n          : nothing}\n      </div>\n    `;\n  }\n}\n", "import { PropConfigMap, PropTypes } from '../../../models/Prop';\n\nexport enum TagListProp {\n  TAGS = 'tags',\n}\n\nexport interface TagListProps extends PropTypes {\n  [TagListProp.TAGS]: string[];\n}\n\nexport const tagListProps: PropConfigMap<TagListProps> = {\n  [TagListProp.TAGS]: {\n    default: [],\n    control: 'text',\n    description: 'The list of tags',\n  },\n};\n", "export const tagDeletedEventName = 'tag-deleted';\n\nexport interface TagDeletedEventPayload {\n  tag: string;\n}\n\nexport class TagDeletedEvent extends CustomEvent<TagDeletedEventPayload> {\n  constructor(payload: TagDeletedEventPayload) {\n    super(tagDeletedEventName, {\n      bubbles: true,\n      composed: true,\n      detail: payload,\n    });\n  }\n}\n", "import { LitElement, css, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\n\nimport { theme } from '../../../styles/theme';\nimport { TagListProp, tagListProps, TagListProps } from './tag-list.models';\nimport { TagDeletedEvent } from './tag-list.events';\n\n@customElement('tag-list')\nexport class TagList extends LitElement {\n  static styles = [\n    theme,\n    css`\n      .tag-list {\n        list-style: none;\n        margin: 0;\n        padding: 0.5rem 0;\n        display: flex;\n        flex-wrap: wrap;\n      }\n\n      .tag-list li {\n        display: inline-block;\n        padding: 0.25rem;\n        border-radius: 0.125rem;\n        border: 1px #ccc solid;\n        background-color: #efefef;\n        position: relative;\n      }\n\n      .tag-list li .delete {\n        display: inline-block;\n        background-color: var(--negative-color);\n        border-radius: 0.25rem;\n        border: 1px rgba(255, 255, 255, 0.5) outset;\n        padding: 0.25rem;\n        color: #fff;\n        font-size: 1.5rem;\n        vertical-align: middle;\n        width: 1rem;\n        height: 1rem;\n        line-height: 1rem;\n        cursor: pointer;\n      }\n    `,\n  ];\n\n  @property({ type: Array })\n  [TagListProp.TAGS]: TagListProps[TagListProp.TAGS] =\n    tagListProps[TagListProp.TAGS].default;\n\n  connectedCallback(): void {\n    super.connectedCallback();\n  }\n\n  private deleteTag(tag: string) {\n    this.dispatchEvent(new TagDeletedEvent({ tag }));\n  }\n\n  render() {\n    return html`\n      <ul class=\"tag-list\" part=\"list\">\n        ${repeat(\n          this.tags,\n          tag => tag,\n          tag => html`\n            <li part=\"item\">\n              ${tag}\n              <span\n                part=\"delete\"\n                class=\"delete\"\n                @click=${() => {\n                  this.deleteTag(tag);\n                }}\n                >&#215;</span\n              >\n            </li>\n          `,\n        )}\n      </ul>\n    `;\n  }\n}\n", "import { PropConfigMap, PropTypes } from '../../models/Prop';\n\nexport enum TagManagerProp {\n  VALUE = 'value',\n  ENABLE_SUGGESTIONS = 'enableSuggestions',\n}\n\nexport interface TagManagerProps extends PropTypes {\n  [TagManagerProp.VALUE]: string;\n  [TagManagerProp.ENABLE_SUGGESTIONS]: boolean;\n}\n\nexport const tagManagerProps: PropConfigMap<TagManagerProps> = {\n  [TagManagerProp.VALUE]: {\n    default: '',\n    control: 'text',\n    description: 'The input value',\n  },\n  [TagManagerProp.ENABLE_SUGGESTIONS]: {\n    default: true,\n    control: 'boolean',\n    description: 'Enable tag suggestions',\n  },\n};\n", "export function msg(key: string): string {\n  return key;\n}\n", "import { LitElement, PropertyValues, css, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\nimport { TagsUpdatedEvent } from './tag-manager.events';\n\nimport './tag-input/tag-input';\nimport './tag-list/tag-list';\n\nimport { theme } from '../../styles/theme';\nimport {\n  TagManagerProp,\n  tagManagerProps,\n  TagManagerProps,\n} from './tag-manager.models';\nimport {\n  TagAddedEvent,\n  TagInputUpdatedEvent,\n  TagSuggestionsUpdatedEvent,\n} from './tag-input/tag-input.events';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { msg } from '../../util/msg';\nimport { TagDeletedEvent } from './tag-list/tag-list.events';\n\n@customElement('tag-manager')\nexport class TagManager extends LitElement {\n  static styles = [\n    theme,\n    css`\n      .tag-manager {\n        border-radius: 0.25rem;\n        border: 1px #ccc solid;\n      }\n\n      .no-tags {\n        margin-top: 0.5rem;\n        color: #666;\n        font-size: 0.75rem;\n      }\n\n      slot {\n        display: none;\n      }\n    `,\n  ];\n\n  @property({ type: String, reflect: true })\n  [TagManagerProp.VALUE]: TagManagerProps[TagManagerProp.VALUE] =\n    tagManagerProps[TagManagerProp.VALUE].default;\n\n  @property({ type: Boolean, reflect: true })\n  [TagManagerProp.ENABLE_SUGGESTIONS]: TagManagerProps[TagManagerProp.ENABLE_SUGGESTIONS] =\n    tagManagerProps[TagManagerProp.ENABLE_SUGGESTIONS].default;\n\n  @state() tags: string[] = [];\n  @state() suggestions: string[] = [];\n\n  connectedCallback(): void {\n    super.connectedCallback();\n  }\n\n  private setupTagsMutationObserver(): void {\n    const tagsSlot = this.shadowRoot?.querySelector('slot[name=\"tags\"]');\n    if (!tagsSlot) {\n      return;\n    }\n\n    const slottedElements = (tagsSlot as HTMLSlotElement).assignedElements();\n\n    const observer = new MutationObserver(() => {\n      this.syncSlotTags();\n    });\n\n    slottedElements.forEach(element => {\n      observer.observe(element, {\n        childList: true,\n        subtree: true,\n        characterData: true,\n        attributes: true,\n      });\n    });\n  }\n\n  private setupSuggestionsMutationObserver(): void {\n    const suggestionsSlot = this.shadowRoot?.querySelector(\n      'slot[name=\"suggestions\"]',\n    );\n    if (!suggestionsSlot) {\n      return;\n    }\n\n    const slottedElements = (\n      suggestionsSlot as HTMLSlotElement\n    ).assignedElements();\n\n    const observer = new MutationObserver(() => {\n      this.syncSlotSuggestions();\n    });\n\n    slottedElements.forEach(element => {\n      observer.observe(element, {\n        childList: true,\n        subtree: true,\n        characterData: true,\n        attributes: true,\n      });\n    });\n  }\n\n  async firstUpdated(_changedProperties: PropertyValues): Promise<void> {\n    super.firstUpdated(_changedProperties);\n    await this.updateComplete;\n\n    const tagsSlotNode = this.shadowRoot?.querySelector('slot[name=\"tags\"]');\n    if (tagsSlotNode) {\n      tagsSlotNode.addEventListener('slotchange', () => {\n        this.syncSlotTags();\n      });\n    }\n\n    this.setupTagsMutationObserver();\n    this.setupSuggestionsMutationObserver();\n\n    this.syncSlotTags();\n\n    const suggestionsSlotNode = this.shadowRoot?.querySelector(\n      'slot[name=\"suggestions\"]',\n    );\n    if (suggestionsSlotNode) {\n      suggestionsSlotNode.addEventListener('slotchange', () => {\n        this.syncSlotSuggestions();\n      });\n    }\n\n    this.syncSlotSuggestions();\n  }\n\n  private syncSlotTags() {\n    this.tags = [];\n    this.querySelectorAll('[slot=\"tags\"] data-item').forEach(item => {\n      this.tags.push(item.textContent || '');\n    });\n  }\n\n  private syncSlotSuggestions() {\n    this.suggestions = [];\n    this.querySelectorAll('[slot=\"suggestions\"] data-item').forEach(item => {\n      this.suggestions.push(item.textContent || '');\n    });\n  }\n\n  private handleTagAdded(e: TagAddedEvent) {\n    this.tags = [...this.tags, e.detail.tag];\n    this.sendUpdatedEvent();\n  }\n\n  private handleDeleted(e: TagDeletedEvent) {\n    this.tags = this.tags.filter(tag => tag !== e.detail.tag);\n    this.sendUpdatedEvent();\n  }\n\n  private handleInputUpdated(e: TagInputUpdatedEvent) {\n    this.value = e.detail.value;\n  }\n\n  private handleSuggestionsUpdated(e: TagSuggestionsUpdatedEvent) {\n    this.suggestions = e.detail.suggestions;\n  }\n\n  private sendUpdatedEvent() {\n    this.dispatchEvent(new TagsUpdatedEvent({ tags: this.tags }));\n  }\n\n  render() {\n    return html`\n      <fieldset class=\"tag-manager\">\n        <legend>${msg('Tags')}</legend>\n\n        <tag-input\n          value=${this.value}\n          ?enableSuggestions=${this.enableSuggestions}\n          @tag-input-updated=${this.handleInputUpdated}\n          @tag-added=${this.handleTagAdded}\n          @tag-suggestions-updated=${this.handleSuggestionsUpdated}\n        >\n          ${repeat(\n            this.suggestions,\n            suggestion => suggestion,\n            suggestion => html` <data-item>${suggestion}</data-item> `,\n          )}\n        </tag-input>\n\n        ${this.tags.length\n          ? html` <tag-list\n              .tags=${this.tags}\n              @tag-deleted=${(e: CustomEvent) => {\n                this.handleDeleted(e);\n              }}\n            ></tag-list>`\n          : html`<div class=\"no-tags\">${msg('No tags are set')}</div>`}\n\n        <slot name=\"tags\"></slot>\n\n        <slot name=\"suggestions\"></slot>\n      </fieldset>\n    `;\n  }\n}\n"],
  "mappings": "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",
  "names": ["TagInputProp", "_a", "TagListProp", "_a", "__decorate", "TagManagerProp", "_a", "_b", "__decorate"]
}
