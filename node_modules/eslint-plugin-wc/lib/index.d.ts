import type { ESLint } from 'eslint';
export declare const rules: {
    'attach-shadow-constructor': import("eslint").Rule.RuleModule;
    'define-tag-after-class-definition': import("eslint").Rule.RuleModule;
    'expose-class-on-global': import("eslint").Rule.RuleModule;
    'file-name-matches-element': import("eslint").Rule.RuleModule;
    'guard-define-call': import("eslint").Rule.RuleModule;
    'guard-super-call': import("eslint").Rule.RuleModule;
    'max-elements-per-file': import("eslint").Rule.RuleModule;
    'no-child-traversal-in-attributechangedcallback': import("eslint").Rule.RuleModule;
    'no-child-traversal-in-connectedcallback': import("eslint").Rule.RuleModule;
    'no-closed-shadow-root': import("eslint").Rule.RuleModule;
    'no-constructor': import("eslint").Rule.RuleModule;
    'no-constructor-attributes': import("eslint").Rule.RuleModule;
    'no-constructor-params': import("eslint").Rule.RuleModule;
    'no-customized-built-in-elements': import("eslint").Rule.RuleModule;
    'no-exports-with-element': import("eslint").Rule.RuleModule;
    'no-invalid-element-name': import("eslint").Rule.RuleModule;
    'no-invalid-extends': import("eslint").Rule.RuleModule;
    'no-method-prefixed-with-on': import("eslint").Rule.RuleModule;
    'no-self-class': import("eslint").Rule.RuleModule;
    'no-typos': import("eslint").Rule.RuleModule;
    'require-listener-teardown': import("eslint").Rule.RuleModule;
    'tag-name-matches-class': import("eslint").Rule.RuleModule;
};
declare const plugin: ESLint.Plugin;
export declare const configs: {
    recommended: ESLint.ConfigData<import("eslint").Linter.RulesRecord>;
    'best-practice': ESLint.ConfigData<import("eslint").Linter.RulesRecord>;
    'flat/recommended': import("eslint").Linter.FlatConfig;
    'flat/best-practice': import("eslint").Linter.FlatConfig;
};
export default plugin;
